{"version":3,"file":"js/processStandardContactProfileData.worker.100f7eb6d8db114cfe59.js","mappings":"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","sources":["webpack://@seamless/chrome-extension/./src/workers/processExtractedData/recipeTypes.js","webpack://@seamless/chrome-extension/webpack/bootstrap","webpack://@seamless/chrome-extension/../../node_modules/comlink/dist/esm/comlink.mjs","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/identifiers.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/contactInfo.js","webpack://@seamless/chrome-extension/./src/utils/data.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/formatProfilePicture.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/industries.js","webpack://@seamless/chrome-extension/../../modules/core/src/utils/ensureArray.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/experience.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/occupation.js","webpack://@seamless/chrome-extension/./src/utils/getCurrentPositions.js","webpack://@seamless/chrome-extension/./src/utils/coreDupes/isObject.js","webpack://@seamless/chrome-extension/./src/utils/hasResults.js","webpack://@seamless/chrome-extension/./src/utils/coreDupes/isEmpty.js","webpack://@seamless/chrome-extension/./src/utils/isValidString.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/createSeamlessContact.js","webpack://@seamless/chrome-extension/./src/utils/collection.js","webpack://@seamless/chrome-extension/./src/utils/isValidContact.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/processStandardContactProfileData/parseStandardContactProfile.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/processStandardContactProfileData/parseStandardContactRecommendations.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/graphQlTextParsers.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/entityUrnTypes.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/processStandardContactProfileData/processStandardContactProfileData.worker.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/processStandardContactProfileData/parseStandardContactPeopleYouMayKnow.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/processStandardContactProfileData/parseStandardContactPeopleAlsoViewed.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/processStandardContactProfileData/parsePositionsGraphQlData.js"],"sourcesContent":["module.exports = {\n\tstandardContact: {\n\t\tTYPE_MINI_PROFILE: 'com.linkedin.voyager.identity.shared.MiniProfile',\n\t\tTYPE_NORMALIZED_PROFILE:\n\t\t\t'com.linkedin.voyager.identity.normalizedprofile.Profile',\n\t\tPROFILE_RECOMMENDATIONS_RECEIVED_METADATA_TYPE:\n\t\t\t'com.linkedin.voyager.identity.profile.RecommendationsMetadata',\n\t\tPROFILE_RECOMMENDATIONS_GIVEN_INCLUDED_PROP: 'recommendeeEntity',\n\t\tPROFILE_PEOPLE_MAY_KNOW_ELEMENTS_URN: 'urn:li:fs_DiscoveryEntity',\n\t\tPROFILE_PEOPLE_ALSO_VIEWED_RECIPE_TYPE:\n\t\t\t'com.linkedin.voyager.dash.deco.identity.profile.BrowsemapProfile',\n\t\tPROFILE_PEOPLE_ALSO_VIEWED_METADATA_TYPE: [\n\t\t\t'com.linkedin.voyager.premium.BrowsemapUpsellInfo',\n\t\t\t'com.linkedin.voyager.dash.identity.profile.BrowsemapUpsellInfo',\n\t\t],\n\t\tIDENTITY_FULL_PROFILE_RECIPE_TYPE:\n\t\t\t'com.linkedin.voyager.dash.deco.identity.profile.FullProfile',\n\t\tFULL_PROFILE_RECIPE_TYPE:\n\t\t\t'com.linkedin.voyager.dash.deco.identity.profile.FullProfileWithEntities',\n\t\tTOP_CARD_SUPPLEMENTARY_RECIPE_TYPE:\n\t\t\t'com.linkedin.voyager.dash.deco.identity.profile.TopCardSupplementary',\n\t},\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst proxyMarker = Symbol(\"Comlink.proxy\");\r\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\r\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\r\nconst throwMarker = Symbol(\"Comlink.thrown\");\r\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\r\n/**\r\n * Internal transfer handle to handle objects marked to proxy.\r\n */\r\nconst proxyTransferHandler = {\r\n    canHandle: (val) => isObject(val) && val[proxyMarker],\r\n    serialize(obj) {\r\n        const { port1, port2 } = new MessageChannel();\r\n        expose(obj, port1);\r\n        return [port2, [port2]];\r\n    },\r\n    deserialize(port) {\r\n        port.start();\r\n        return wrap(port);\r\n    },\r\n};\r\n/**\r\n * Internal transfer handler to handle thrown exceptions.\r\n */\r\nconst throwTransferHandler = {\r\n    canHandle: (value) => isObject(value) && throwMarker in value,\r\n    serialize({ value }) {\r\n        let serialized;\r\n        if (value instanceof Error) {\r\n            serialized = {\r\n                isError: true,\r\n                value: {\r\n                    message: value.message,\r\n                    name: value.name,\r\n                    stack: value.stack,\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            serialized = { isError: false, value };\r\n        }\r\n        return [serialized, []];\r\n    },\r\n    deserialize(serialized) {\r\n        if (serialized.isError) {\r\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\r\n        }\r\n        throw serialized.value;\r\n    },\r\n};\r\n/**\r\n * Allows customizing the serialization of certain values.\r\n */\r\nconst transferHandlers = new Map([\r\n    [\"proxy\", proxyTransferHandler],\r\n    [\"throw\", throwTransferHandler],\r\n]);\r\nfunction expose(obj, ep = self) {\r\n    ep.addEventListener(\"message\", function callback(ev) {\r\n        if (!ev || !ev.data) {\r\n            return;\r\n        }\r\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\r\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\r\n        let returnValue;\r\n        try {\r\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\r\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\r\n            switch (type) {\r\n                case \"GET\" /* GET */:\r\n                    {\r\n                        returnValue = rawValue;\r\n                    }\r\n                    break;\r\n                case \"SET\" /* SET */:\r\n                    {\r\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\r\n                        returnValue = true;\r\n                    }\r\n                    break;\r\n                case \"APPLY\" /* APPLY */:\r\n                    {\r\n                        returnValue = rawValue.apply(parent, argumentList);\r\n                    }\r\n                    break;\r\n                case \"CONSTRUCT\" /* CONSTRUCT */:\r\n                    {\r\n                        const value = new rawValue(...argumentList);\r\n                        returnValue = proxy(value);\r\n                    }\r\n                    break;\r\n                case \"ENDPOINT\" /* ENDPOINT */:\r\n                    {\r\n                        const { port1, port2 } = new MessageChannel();\r\n                        expose(obj, port2);\r\n                        returnValue = transfer(port1, [port1]);\r\n                    }\r\n                    break;\r\n                case \"RELEASE\" /* RELEASE */:\r\n                    {\r\n                        returnValue = undefined;\r\n                    }\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n        }\r\n        catch (value) {\r\n            returnValue = { value, [throwMarker]: 0 };\r\n        }\r\n        Promise.resolve(returnValue)\r\n            .catch((value) => {\r\n            return { value, [throwMarker]: 0 };\r\n        })\r\n            .then((returnValue) => {\r\n            const [wireValue, transferables] = toWireValue(returnValue);\r\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\r\n            if (type === \"RELEASE\" /* RELEASE */) {\r\n                // detach and deactive after sending release response above.\r\n                ep.removeEventListener(\"message\", callback);\r\n                closeEndPoint(ep);\r\n            }\r\n        });\r\n    });\r\n    if (ep.start) {\r\n        ep.start();\r\n    }\r\n}\r\nfunction isMessagePort(endpoint) {\r\n    return endpoint.constructor.name === \"MessagePort\";\r\n}\r\nfunction closeEndPoint(endpoint) {\r\n    if (isMessagePort(endpoint))\r\n        endpoint.close();\r\n}\r\nfunction wrap(ep, target) {\r\n    return createProxy(ep, [], target);\r\n}\r\nfunction throwIfProxyReleased(isReleased) {\r\n    if (isReleased) {\r\n        throw new Error(\"Proxy has been released and is not useable\");\r\n    }\r\n}\r\nfunction createProxy(ep, path = [], target = function () { }) {\r\n    let isProxyReleased = false;\r\n    const proxy = new Proxy(target, {\r\n        get(_target, prop) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            if (prop === releaseProxy) {\r\n                return () => {\r\n                    return requestResponseMessage(ep, {\r\n                        type: \"RELEASE\" /* RELEASE */,\r\n                        path: path.map((p) => p.toString()),\r\n                    }).then(() => {\r\n                        closeEndPoint(ep);\r\n                        isProxyReleased = true;\r\n                    });\r\n                };\r\n            }\r\n            if (prop === \"then\") {\r\n                if (path.length === 0) {\r\n                    return { then: () => proxy };\r\n                }\r\n                const r = requestResponseMessage(ep, {\r\n                    type: \"GET\" /* GET */,\r\n                    path: path.map((p) => p.toString()),\r\n                }).then(fromWireValue);\r\n                return r.then.bind(r);\r\n            }\r\n            return createProxy(ep, [...path, prop]);\r\n        },\r\n        set(_target, prop, rawValue) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\r\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\r\n            const [value, transferables] = toWireValue(rawValue);\r\n            return requestResponseMessage(ep, {\r\n                type: \"SET\" /* SET */,\r\n                path: [...path, prop].map((p) => p.toString()),\r\n                value,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        apply(_target, _thisArg, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const last = path[path.length - 1];\r\n            if (last === createEndpoint) {\r\n                return requestResponseMessage(ep, {\r\n                    type: \"ENDPOINT\" /* ENDPOINT */,\r\n                }).then(fromWireValue);\r\n            }\r\n            // We just pretend that `bind()` didn’t happen.\r\n            if (last === \"bind\") {\r\n                return createProxy(ep, path.slice(0, -1));\r\n            }\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: \"APPLY\" /* APPLY */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        construct(_target, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: \"CONSTRUCT\" /* CONSTRUCT */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n    });\r\n    return proxy;\r\n}\r\nfunction myFlat(arr) {\r\n    return Array.prototype.concat.apply([], arr);\r\n}\r\nfunction processArguments(argumentList) {\r\n    const processed = argumentList.map(toWireValue);\r\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\r\n}\r\nconst transferCache = new WeakMap();\r\nfunction transfer(obj, transfers) {\r\n    transferCache.set(obj, transfers);\r\n    return obj;\r\n}\r\nfunction proxy(obj) {\r\n    return Object.assign(obj, { [proxyMarker]: true });\r\n}\r\nfunction windowEndpoint(w, context = self, targetOrigin = \"*\") {\r\n    return {\r\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\r\n        addEventListener: context.addEventListener.bind(context),\r\n        removeEventListener: context.removeEventListener.bind(context),\r\n    };\r\n}\r\nfunction toWireValue(value) {\r\n    for (const [name, handler] of transferHandlers) {\r\n        if (handler.canHandle(value)) {\r\n            const [serializedValue, transferables] = handler.serialize(value);\r\n            return [\r\n                {\r\n                    type: \"HANDLER\" /* HANDLER */,\r\n                    name,\r\n                    value: serializedValue,\r\n                },\r\n                transferables,\r\n            ];\r\n        }\r\n    }\r\n    return [\r\n        {\r\n            type: \"RAW\" /* RAW */,\r\n            value,\r\n        },\r\n        transferCache.get(value) || [],\r\n    ];\r\n}\r\nfunction fromWireValue(value) {\r\n    switch (value.type) {\r\n        case \"HANDLER\" /* HANDLER */:\r\n            return transferHandlers.get(value.name).deserialize(value.value);\r\n        case \"RAW\" /* RAW */:\r\n            return value.value;\r\n    }\r\n}\r\nfunction requestResponseMessage(ep, msg, transfers) {\r\n    return new Promise((resolve) => {\r\n        const id = generateUUID();\r\n        ep.addEventListener(\"message\", function l(ev) {\r\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\r\n                return;\r\n            }\r\n            ep.removeEventListener(\"message\", l);\r\n            resolve(ev.data);\r\n        });\r\n        if (ep.start) {\r\n            ep.start();\r\n        }\r\n        ep.postMessage(Object.assign({ id }, msg), transfers);\r\n    });\r\n}\r\nfunction generateUUID() {\r\n    return new Array(4)\r\n        .fill(0)\r\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\r\n        .join(\"-\");\r\n}\n\nexport { createEndpoint, expose, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","// ie., https://www.linkedin.com/in/annieheckenberger/\nconst STANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP =\n\t/(?:https?:)?(?:\\/\\/)?(?:[\\w]+\\.)?(?:linkedin\\.com)?\\/in\\/(?<publicIdentifier>[\\w_À&&-ÿ%-][^/?]+)\\/?/i;\n\n// Examples:\n// https://www.linkedin.com/sales/company/130757/insights?_ntb=fAcMJ6%2FtREiNqQyKnKT4Xg%3D%3D\n// https://www.linkedin.com/sales/people/ACwAAAAmVFgBoPQGSO_l_3cwHlpNdOiHdaW2pAQ,NAME_SEARCH,L7q4?_ntb=%C2%A6%15O%09%C3%92%C2%AAA%C2%B0%C2%AF%C3%90%20C%C3%BFk%1D%C2%9A\n// https://www.linkedin.com/sales/lead/ACwAAAAmVFgBoPQGSO_l_3cwHlpNdOiHdaW2pAQ,NAME_SEARCH,L7q4?_ntb=%C2%A6%15O%09%C3%92%C2%AAA%C2%B0%C2%AF%C3%90%20C%C3%BFk%1D%C2%9A\nconst PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP =\n\t/(?:https?:)?(?:\\/\\/)?(?:[\\w]+\\.)?(?:linkedin\\.com)?\\/sales\\/(people|lead)\\/(?<publicIdentifier>[\\w_À&-ÿ%-][^,?/]+)?/i;\n\n// ie., https://www.linkedin.com/company/saatchi-&-saatchi-wellness/\nconst STANDARD_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP =\n\t/(?:https?:)?(?:\\/\\/)?(?:[\\w]+\\.)?(?:linkedin\\.com)?\\/company\\/(?<publicIdentifier>[\\w_À&-ÿ%-][^/?]+)\\/?/i;\n\n// ie., /sales/company/610608?_ntb=fAcMJ6%2FtREiNqQyKnKT4Xg%3D%3D\nconst PREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP =\n\t/(?:https?:)?(?:\\/\\/)?(?:[\\w]+\\.)?(?:linkedin\\.com)?\\/sales\\/company\\/(?<publicIdentifier>[\\d][^/?]+)\\/?/i;\n\n// Examples:\n// https://www.linkedin.com/talent/profile/AEMAAAB_kGABaRsOMBn6bfW1iw_90slztzfmdys?project=400938220&lipi=urn%3Ali%3Apage%3Ad_talent_projectsHome%3B%2BMSr4USfTHyZnlrgcgRpVw%3D%3D\n// /talent/profile/AEMAAAB_kGABaRsOMBn6bfW1iw_90slztzfmdys?project=400938220&lipi=urn%3Ali%3Apage%3Ad_talent_projectsHome%3B%2BMSr4USfTHyZnlrgcgRpVw%3D%3D\n// https://www.linkedin.com/talent/hire/400938220/manage/all/profile/AEMAAAEzgEcBNTs49BJySGuQVAAZ2K9CECIwpT0?project=400938220\nconst RECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP =\n\t/(?:\\/profile)\\/(?<publicIdentifier>[\\w_À&-ÿ%-][^?/]+)\\/?/i;\n\n// urn:li:fs_salesCompany:76390\n// urn:li:member:159784268286\n// urn:li:fsd_entityResultViewModel:(urn:li:fsd_company:3776,SEARCH_SRP)\nconst GET_MEMBER_ID_FROM_URN_REG_EXP =\n\t/(?:\\w+:(\\(?))+(?::[\\w_]+(?:member|company):)?(?<memberId>[\\d]+)?/i;\n\n// Examples:\n// urn:li:fs_salesProfile:(ACwAAABXB8YBL-pY0m1uk-T5PnxhaGO1zKqmc8U,NAME_SEARCH,ecVP)\n// urn:li:fsd_entityResultViewModel:urn:li:fsd_profile:ACoAAA2xYEwBskLoVyr5rCQ4PWpslakEhwAtgXc // New Community search result entityUrn\n// urn:li:fsd_profileCard:(ACoAAAAD8nEBVA4J_Y8kdohsFvb49-Gritg17kQ,EXPERIENCE,en_US)\nconst SALES_NAV_ID_FROM_URN_REG_EXP =\n\t/(?:\\w+:)+fs(?:d)?_(?:sales|mini|profile)?(Profile|Card):(?:\\()?(?<salesNavId>[\\w_À&-ÿ%-][^,]+)?,?(?<type>.[^,]+)?/i;\n\n// ie., urn:li:ts_profile:AEMAAABRsqUB-vVYVqCYoLwKjsFNBZFF_I4IYdw\nconst RECRUITER_CONTACT_FROM_URN_REG_EXP =\n\t/(?:\\w+:)+(ts_profile|ts_linkedin_member_profile):\\(?(?<recruiterId>[\\w_À&-ÿ%-][^,?]+)?/i;\n\n// TODO: this is getting big, refactor...how to pull key matchers\n// from central location instead of appending here\nconst profileUrlIdModuleRegexMap = {\n\tpremiumCompanySearch: PREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumCompanyProfile: PREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumSavedAccounts: PREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumCompanyRecommendedLeads:\n\t\tPREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumCompanyAccountMapEntries:\n\t\tPREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumCompanyPeopleAlsoViewed:\n\t\tPREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\n\tpremiumSavedLeads: PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactSavedSearch: PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactSearch: PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactProfile: PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactRecommendations:\n\t\tPREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactRecommendedLeads:\n\t\tPREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactSimilarLeads: PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\n\tstandardCompanySearch: STANDARD_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardCompanyProfile: STANDARD_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardCompanyPeopleYouMayKnow:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardBlendedSearchCompany:\n\t\tSTANDARD_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\n\tstandardContactProfile: STANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardContactPeopleYouMayKnow:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardContactPeopleAlsoViewed:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardContactRecommendationsReceived:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardContactRecommendationsGiven:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardContactSearch: STANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardBlendedSearchContact:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\n\trecruiterContactProfile: RECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\trecruiterContactRecommendations:\n\t\tRECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\trecruiterContactSimilarProfiles:\n\t\tRECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\trecruiterContactSearch: RECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\trecruiterSavedContactSearch:\n\t\tRECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n};\n\nexport function getIdFromProfileUrl(profileUrl, module) {\n\tif (!profileUrl || !module) {\n\t\treturn null;\n\t}\n\n\tconst matchRegExp = profileUrlIdModuleRegexMap[module];\n\tconst publicIdentifierMatchObj = profileUrl.match(matchRegExp);\n\tconst profileId = publicIdentifierMatchObj?.groups?.publicIdentifier;\n\treturn profileId ? decodeURI(profileId) : null;\n}\n\nexport function getMemberIdFromUrn(urn) {\n\tconst memberIdMatchObj = urn.match(GET_MEMBER_ID_FROM_URN_REG_EXP);\n\treturn memberIdMatchObj?.groups?.memberId;\n}\n\nexport function getSalesNavIdFromUrn(urn) {\n\tconst salesNavIdMatchObj = urn.match(SALES_NAV_ID_FROM_URN_REG_EXP);\n\treturn salesNavIdMatchObj?.groups?.salesNavId;\n}\n\nexport function getRecruiterIdFromUrn(urn) {\n\tconst recruiterIdMatchObj = urn.match(RECRUITER_CONTACT_FROM_URN_REG_EXP);\n\treturn recruiterIdMatchObj?.groups?.recruiterId;\n}\n\n// parses the salesnav style urn now used in new li basic graphQL data to get the id and data type from it.\n// creating this as a separate function from getSalesNavIdFromUrn for now as we try to move towards a new\n// structure of processing the data.\nexport function parseElementUrn(urn) {\n\tconst elementUrnMatchObj = urn.match(SALES_NAV_ID_FROM_URN_REG_EXP);\n\tconst { salesNavId, type } = elementUrnMatchObj?.groups || {};\n\treturn {\n\t\tliSalesNavId: salesNavId || '',\n\t\telementType: type || '',\n\t};\n}\n","import isEmpty from 'utils/coreDupes/isEmpty';\nimport isObject from 'utils/coreDupes/isObject';\n\n/**\n * Email Address\n */\n\n/**\n * Takes a number of email address response types from a LinkedIn response and returns just the email address\n * @param {Array.<Object>} emails - Several different objects with a nested email address\n * @param {string} primaryEmail - When sometimes an email address is passed down without other LinkedIn display data\n * @returns {string} The deduced email address\n */\nexport function formatEmailAddress(emails, primaryEmail) {\n\ttry {\n\t\tlet emailAddress;\n\n\t\tif (primaryEmail?.length) {\n\t\t\temailAddress = primaryEmail;\n\t\t} else if (emails && typeof emails === 'string' && emails.length) {\n\t\t\temailAddress = emails;\n\t\t} else if (emails?.emailAddress) {\n\t\t\temailAddress = emails.emailAddress;\n\t\t} else if (Array.isArray(emails) && emails.length) {\n\t\t\temailAddress = emails[0].emailAddress;\n\t\t}\n\n\t\treturn emailAddress;\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n\n/**\n * Location\n */\n\nexport const cleanLocationString = (locationString) => {\n\treturn (\n\t\tlocationString\n\t\t\t// Replace line breaks\n\t\t\t.replace(/(\\r\\n|\\n|\\r)/gm, ' ')\n\t\t\t.replace(/^Greater /, '')\n\t\t\t.replace(/ Area$/, '')\n\t\t\t.replace(/ Metropolitan$/, '')\n\t);\n};\n\nconst LOCATION_OBJECT_KEYS = [\n\t'line1',\n\t'line2',\n\t'city',\n\t'geographicArea',\n\t'postalCode',\n\t'country',\n];\nfunction hasValidLocationKeys(location) {\n\treturn (\n\t\tisObject(location) &&\n\t\t!isEmpty(location) &&\n\t\tObject.keys(location).some((k) => LOCATION_OBJECT_KEYS.includes(k))\n\t);\n}\n\nexport function formatCompanyLocationObject(location) {\n\ttry {\n\t\tlet street1;\n\t\tlet street2;\n\t\tlet city;\n\t\tlet state;\n\t\tlet postCode;\n\t\tlet country;\n\n\t\tif (location && hasValidLocationKeys(location)) {\n\t\t\t({\n\t\t\t\tline1: street1,\n\t\t\t\tline2: street2,\n\t\t\t\tcity,\n\t\t\t\tgeographicArea: state,\n\t\t\t\tpostalCode: postCode,\n\t\t\t\tcountry,\n\t\t\t} = location);\n\t\t}\n\n\t\treturn {\n\t\t\tstreet1,\n\t\t\tstreet2,\n\t\t\tcity,\n\t\t\tstate,\n\t\t\tpostCode,\n\t\t\tcountry,\n\t\t};\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n\nexport function getCompanyLocationStringFromObject(locationObject) {\n\ttry {\n\t\tlet fullString;\n\t\tif (!isEmpty(locationObject)) {\n\t\t\tconst {\n\t\t\t\tstreet1,\n\t\t\t\tstreet2 = '',\n\t\t\t\tcity,\n\t\t\t\tstate,\n\t\t\t\tpostCode,\n\t\t\t\tcountry,\n\t\t\t} = locationObject;\n\t\t\tfullString = [street1, street2, city, state, postCode, country]\n\t\t\t\t.map((s) => s && s.trim())\n\t\t\t\t.filter((s) => !!s)\n\t\t\t\t.join(' ');\n\t\t}\n\n\t\tif (typeof fullString === 'string' && !fullString.length) {\n\t\t\tfullString = undefined;\n\t\t}\n\n\t\treturn fullString;\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n\n/**\n * Social\n */\n\nexport function formatContactSocial({\n\twebsites = [],\n\tsocialHandles = [],\n\ttwitterHandles = [],\n}) {\n\ttry {\n\t\tlet social = [];\n\n\t\tif (websites?.length) {\n\t\t\tconst contactWebsites = websites\n\t\t\t\t.map(\n\t\t\t\t\t(w) =>\n\t\t\t\t\t\tw && {\n\t\t\t\t\t\t\ttype: w.type?.category\n\t\t\t\t\t\t\t\t? w.type.category\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\turl: w.url,\n\t\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\t.filter((w) => !!w);\n\t\t\tif (contactWebsites?.length) {\n\t\t\t\tcontactWebsites.forEach((website) => social.push(website));\n\t\t\t}\n\t\t}\n\n\t\tif (socialHandles?.length) {\n\t\t\tconst contactSocialHandles = socialHandles.map(\n\t\t\t\t(t) =>\n\t\t\t\t\tt?.type?.length &&\n\t\t\t\t\tt.type.toLowerCase() === 'twitter' && {\n\t\t\t\t\t\ttype: 'social',\n\t\t\t\t\t\tsocialType: 'twitter',\n\t\t\t\t\t\turl: `http://twitter.com/${t.name}`,\n\t\t\t\t\t}\n\t\t\t);\n\n\t\t\tif (contactSocialHandles?.length) {\n\t\t\t\tsocial.push(contactSocialHandles);\n\t\t\t}\n\t\t}\n\n\t\tif (twitterHandles?.length) {\n\t\t\tconst contactTwitterHandles = twitterHandles.map(\n\t\t\t\t(t) =>\n\t\t\t\t\tt?.name && {\n\t\t\t\t\t\ttype: 'social',\n\t\t\t\t\t\tsocialType: 'twitter',\n\t\t\t\t\t\turl: t.name.includes('http')\n\t\t\t\t\t\t\t? t.name\n\t\t\t\t\t\t\t: `http://twitter.com/${t.name}`,\n\t\t\t\t\t}\n\t\t\t);\n\t\t\tif (contactTwitterHandles?.length) {\n\t\t\t\tsocial.push(contactTwitterHandles);\n\t\t\t}\n\t\t}\n\n\t\t// if (picture && picture.length) {\n\t\t// \tsocial.push({\n\t\t// \t\ttype: 'image',\n\t\t// \t\turl: picture,\n\t\t// \t\tsocialType: 'LinkedIn',\n\t\t// \t});\n\t\t// }\n\n\t\tif (social?.length) {\n\t\t\tsocial = social.filter((s) => s && s.url);\n\t\t}\n\n\t\treturn social;\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n","const cleanEmptyNullData = (data) => {\n\tif (!data) {\n\t\treturn {};\n\t}\n\n\tconst cleanedData = data;\n\tObject.entries(cleanedData).forEach(([k, v]) => {\n\t\tif (v && typeof v === 'object') {\n\t\t\tcleanEmptyNullData(v);\n\t\t}\n\n\t\tif (\n\t\t\t(v && typeof v === 'object' && !Object.keys(v).length) ||\n\t\t\tv === null ||\n\t\t\tv === undefined\n\t\t) {\n\t\t\tif (Array.isArray(cleanedData)) {\n\t\t\t\tcleanedData.splice(k, 1);\n\t\t\t} else {\n\t\t\t\tdelete cleanedData[k];\n\t\t\t}\n\t\t}\n\t});\n\n\treturn cleanedData;\n};\n\nconst cleanLocationString = (locationString) => {\n\treturn (\n\t\tlocationString\n\t\t\t// Replace line breaks\n\t\t\t.replace(/(\\r\\n|\\n|\\r)/gm, ' ')\n\t\t\t.replace(/^Greater /, '')\n\t\t\t.replace(/ Area$/, '')\n\t\t\t.replace(/ Metropolitan$/, '')\n\t);\n};\n\nconst cleanUrl = (url) => {\n\tlet newUrl = url && typeof url === 'string' && url.trim();\n\tif (!newUrl) {\n\t\t// return original data\n\t\treturn url;\n\t}\n\n\tif (/^https?:\\/([^/].*|\\/\\/+.+)$/i.test(newUrl)) {\n\t\tnewUrl = newUrl.replace(/:\\/+/, '://');\n\t}\n\n\treturn newUrl;\n};\n\nexport { cleanEmptyNullData, cleanLocationString, cleanUrl };\n","import { cleanUrl } from 'utils/data';\n\nconst formatProfilePicture = (profilePicture) => {\n\ttry {\n\t\tlet picture = profilePicture;\n\n\t\tif (picture && typeof picture === 'object') {\n\t\t\tconst { artifacts, rootUrl } = picture;\n\t\t\tif (\n\t\t\t\trootUrl?.length &&\n\t\t\t\trootUrl.includes('http') &&\n\t\t\t\tartifacts &&\n\t\t\t\tArray.isArray(artifacts)\n\t\t\t) {\n\t\t\t\tpicture =\n\t\t\t\t\trootUrl +\n\t\t\t\t\tartifacts[artifacts.length - 1]\n\t\t\t\t\t\t.fileIdentifyingUrlPathSegment;\n\t\t\t} else if (\n\t\t\t\t(!rootUrl || !rootUrl.length) &&\n\t\t\t\tartifacts?.length &&\n\t\t\t\tartifacts[artifacts.length - 1].fileIdentifyingUrlPathSegment &&\n\t\t\t\tartifacts[\n\t\t\t\t\tartifacts.length - 1\n\t\t\t\t].fileIdentifyingUrlPathSegment.includes('http')\n\t\t\t) {\n\t\t\t\tpicture =\n\t\t\t\t\tartifacts[artifacts.length - 1]\n\t\t\t\t\t\t.fileIdentifyingUrlPathSegment;\n\t\t\t}\n\n\t\t\tif (!picture || !picture.length) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\tpicture = picture && cleanUrl(picture);\n\t\treturn picture;\n\t} catch (err) {\n\t\treturn undefined;\n\t}\n};\n\nexport default formatProfilePicture;\n","const formatContactIndustries = (industries = []) => {\n\ttry {\n\t\tlet formattedIndustries = industries;\n\t\tif (\n\t\t\tformattedIndustries &&\n\t\t\ttypeof formattedIndustries === 'object' &&\n\t\t\t!Array.isArray(formattedIndustries)\n\t\t) {\n\t\t\tformattedIndustries = Object.values(formattedIndustries);\n\t\t}\n\n\t\tformattedIndustries = formattedIndustries.reduce((arr, ind) => {\n\t\t\tconst industry = (\n\t\t\t\t(typeof ind === 'string' && ind) ||\n\t\t\t\tind.name ||\n\t\t\t\t''\n\t\t\t).trim();\n\t\t\tif (industry) {\n\t\t\t\tarr.push(industry);\n\t\t\t}\n\t\t\treturn arr;\n\t\t}, []);\n\t\treturn formattedIndustries.length ? formattedIndustries : null;\n\t} catch (err) {\n\t\treturn null;\n\t}\n};\n\nexport default formatContactIndustries;\n","function ensureArray(val) {\n\tif (Array.isArray(val)) {\n\t\treturn val;\n\t}\n\n\tif (val == null) {\n\t\treturn [];\n\t}\n\n\treturn [val];\n}\n\nexport default ensureArray;\n","import ensureArray from '@seamless/core/src/utils/ensureArray';\n\nexport function formatContactEducations(educations) {\n\ttry {\n\t\treturn educations\n\t\t\t.filter((education) => education)\n\t\t\t.map((education) => {\n\t\t\t\tconst {\n\t\t\t\t\tschoolName: name,\n\t\t\t\t\tdegree,\n\t\t\t\t\tdegreeName,\n\t\t\t\t\tactivities = [],\n\t\t\t\t\tfieldOfStudy,\n\t\t\t\t\tdateRange: {\n\t\t\t\t\t\tstart: { year: dateRangeStartYear } = {},\n\t\t\t\t\t\tend: { year: dateRangeEndYear } = {},\n\t\t\t\t\t} = {},\n\t\t\t\t\tstartedOn: { year: startedOnYear } = {},\n\t\t\t\t\tendedOn: { year: endedOnYear } = {},\n\t\t\t\t\tendDateOn: { year: endDateOnYear } = {},\n\t\t\t\t\tstartDateOn: { year: startDateOnYear } = {},\n\n\t\t\t\t\t// Legacy Recruiter\n\t\t\t\t\tstartDateYear,\n\t\t\t\t\tendDateYear,\n\t\t\t\t} = education;\n\n\t\t\t\tconst startYear =\n\t\t\t\t\tdateRangeStartYear ||\n\t\t\t\t\tstartedOnYear ||\n\t\t\t\t\tstartDateOnYear ||\n\t\t\t\t\tstartDateYear;\n\t\t\t\tconst endYear =\n\t\t\t\t\tdateRangeEndYear ||\n\t\t\t\t\tendedOnYear ||\n\t\t\t\t\tendDateOnYear ||\n\t\t\t\t\tendDateYear;\n\n\t\t\t\tlet { fieldsOfStudy } = education;\n\t\t\t\tif (Array.isArray(fieldsOfStudy) && fieldsOfStudy.length) {\n\t\t\t\t\tfieldsOfStudy = fieldsOfStudy.join();\n\t\t\t\t}\n\n\t\t\t\tconst educationFieldOfStudy =\n\t\t\t\t\ttypeof fieldsOfStudy === 'string'\n\t\t\t\t\t\t? fieldsOfStudy\n\t\t\t\t\t\t: fieldOfStudy;\n\n\t\t\t\tconst formattedEducation = {\n\t\t\t\t\tcompanyName: name,\n\t\t\t\t\tdegreeName: degreeName || degree,\n\t\t\t\t\tactivities: activities && ensureArray(activities),\n\t\t\t\t\tfieldOfStudy: educationFieldOfStudy,\n\t\t\t\t\t...(startYear && { startDate: { year: startYear } }),\n\t\t\t\t\t...(endYear && { endDate: { year: endYear } }),\n\t\t\t\t};\n\n\t\t\t\treturn formattedEducation;\n\t\t\t});\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n\nexport function formatContactSkills(skills = []) {\n\ttry {\n\t\tconst contactSkills = skills.reduce((skillsArr, skill) => {\n\t\t\tconst _skills = skillsArr;\n\t\t\tif (skill.name) {\n\t\t\t\t_skills.push(skill.name);\n\t\t\t}\n\t\t\treturn _skills;\n\t\t}, []);\n\t\treturn contactSkills;\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n\nexport function formatContactLanguages(languages = []) {\n\ttry {\n\t\tconst contactLanguages = languages.reduce((languagesArr, language) => {\n\t\t\tconst _languages = languagesArr;\n\t\t\tif (language.name) {\n\t\t\t\t_languages.push(language.name);\n\t\t\t}\n\t\t\treturn _languages;\n\t\t}, []);\n\t\treturn contactLanguages;\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n","import { getMemberIdFromUrn } from 'workers/processExtractedData/utils/identifiers';\nimport ensureArray from '@seamless/core/src/utils/ensureArray';\nimport { cleanLocationString } from 'utils/data';\n\nconst formatContactPosition = (position) => {\n\tconst {\n\t\tcompany,\n\t\tcompanyName,\n\t\tcompanyUrn,\n\t\tcompanyUrnResolutionResult,\n\t\tcompanyResolutionResult,\n\t\tcurrent,\n\t\tdateRange,\n\t\tdescription,\n\t\t// Used for filtering out duplicates and not filtering out the rare type of same position\n\t\t// but one being \"contract\" to \"full-time\", ie. https://www.linkedin.com/in/alyssa-muscarello/\n\t\t'*employmentType': employmentType,\n\t\tendDateOn,\n\t\tendedOn,\n\t\tlocation,\n\t\tlocationName,\n\t\tstartDateOn,\n\t\tstartedOn,\n\t\ttitle,\n\t} = position;\n\n\tconst { industry, location: companyUrnLocation } =\n\t\tcompanyUrnResolutionResult || {};\n\n\tconst { industries: _industries } = companyResolutionResult || {};\n\n\tconst {\n\t\tstart: _dateRangeStart,\n\t\tstartDate: _dateRangeStartDate,\n\t\tend: _dateRangeEndDate,\n\t\tendDate: _dateRangeEnd,\n\t} = dateRange || {};\n\n\tconst _companyUrn =\n\t\t(company && typeof company === 'string' && company) || companyUrn;\n\n\tconst startDate =\n\t\t_dateRangeStart || _dateRangeStartDate || startDateOn || startedOn;\n\tconst endDate = _dateRangeEnd || _dateRangeEndDate || endDateOn || endedOn;\n\n\tlet _location = location?.displayName ?? location;\n\tif (!_location && companyUrnLocation) {\n\t\t_location = companyUrnLocation;\n\t}\n\n\tif (!_location && locationName) {\n\t\t_location = locationName;\n\t}\n\n\tlet industries;\n\tif (_industries) {\n\t\tindustries = ensureArray(_industries);\n\t} else if (industry) {\n\t\tindustries = ensureArray(industry);\n\t}\n\n\treturn {\n\t\tcompanyName: companyName?.trim(),\n\t\tcurrent,\n\t\tdescription,\n\t\temploymentType,\n\t\tendDate:\n\t\t\tendDate &&\n\t\t\ttypeof endDate === 'object' &&\n\t\t\tObject.keys(endDate).length\n\t\t\t\t? {\n\t\t\t\t\t\t...(endDate.month && { month: endDate.month }),\n\t\t\t\t\t\t...(endDate.year && { year: endDate.year }),\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\tfullString: _location && cleanLocationString(_location),\n\t\tindustries:\n\t\t\tindustries && Array.isArray(industries) && industries.length\n\t\t\t\t? industries\n\t\t\t\t: null,\n\t\tlinkedInCompanyId: _companyUrn && getMemberIdFromUrn(_companyUrn),\n\t\tstartDate:\n\t\t\tstartDate &&\n\t\t\ttypeof startDate === 'object' &&\n\t\t\tObject.keys(startDate).length\n\t\t\t\t? {\n\t\t\t\t\t\t...(startDate.month && { month: startDate.month }),\n\t\t\t\t\t\t...(startDate.year && { year: startDate.year }),\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\ttitleName: title,\n\t};\n};\n\nconst formatOccupationSnippet = (snippetText) => {\n\tlet occupation;\n\n\tconst occupationParts = snippetText.match(\n\t\t/^current:\\s(.*)(\\s-\\s\\.\\.\\..*)?$/i\n\t);\n\tif (occupationParts?.length) {\n\t\t[, occupation] = occupationParts;\n\t}\n\n\treturn occupation;\n};\n\n/**\n * Parses an occupation string into company name and title\n * @param {String} occupation\n * @return {Object} { companyName, title }\n */\nconst parsePositionFromOccupationString = (occupation) => {\n\tconst occupationParts =\n\t\toccupation &&\n\t\t((occupation.indexOf(' at ') > -1 && occupation.split(' at ')) ||\n\t\t\t(occupation.indexOf(' @ ') > -1 && occupation.split(' @ ')) ||\n\t\t\t(occupation.indexOf(' - ') > -1 && occupation.split(' - ')));\n\n\tlet companyName;\n\tlet title;\n\n\tif (!occupationParts) {\n\t\ttitle = occupation;\n\t} else {\n\t\tcompanyName =\n\t\t\t!occupationParts?.length || occupationParts.length === 1\n\t\t\t\t? undefined\n\t\t\t\t: occupationParts.pop();\n\t\ttitle = !occupationParts?.length\n\t\t\t? undefined\n\t\t\t: occupationParts.join(' ');\n\t}\n\n\treturn { companyName, title };\n};\n\nconst getPositionsFromGroupedWorkExperience = (groupedWorkExperience) => {\n\tconst positions = groupedWorkExperience.reduce(\n\t\t(groupedPositionsArr, arrItem) => {\n\t\t\tlet positionsArr = groupedPositionsArr;\n\t\t\tconst groupPositions = arrItem.positions;\n\t\t\tpositionsArr = [...(positionsArr || []), ...(groupPositions || [])];\n\t\t\treturn positionsArr;\n\t\t},\n\t\t[]\n\t);\n\treturn positions;\n};\n\nexport {\n\tformatContactPosition,\n\tformatOccupationSnippet,\n\tparsePositionFromOccupationString,\n\tgetPositionsFromGroupedWorkExperience,\n};\n","export default function getCurrentPositions(positions) {\n\treturn positions.filter((p) => {\n\t\treturn (!p.endDate && p.startDate) || p.current;\n\t});\n}\n","// TODO: This was copied from `@seamless/core` and should be replaced with the version there\n// when that package has better code splitting support, b/c currently the build throws\n// errors when an imported method is used in a web worker.\n//\n// If this is to be imported anywhere other than a web worker, use the module from '@seamless/core'\n\n/**\n * Check if value is the language type of Object\n * @param {any} val - The value to test\n * @return {boolean} - True if the value is an Object, otherwise false.\n * example\n * isObject({}); // -> true\n * isObject([]); // -> true\n */\nconst isObject = (val) => {\n\tconst type = typeof val;\n\treturn !!val && (type === 'function' || type === 'object');\n};\n\nexport default isObject;\n","import isEmpty from 'utils/coreDupes/isEmpty';\n\nconst hasResults = (data) => Array.isArray(data) && !isEmpty(data);\n\nexport default hasResults;\n","// TODO: This was copied from `@seamless/core` and should be replaced with the version there\n// when that package has better code splitting support, b/c currently the build throws\n// errors when an imported method is used in a web worker.\n//\n// If this is to be imported anywhere other than a web worker, use the module from '@seamless/core'\n\nimport isObject from './isObject';\n\n/**\n * Check if value is an empty object or array.\n * @param {any} val - The value to check\n * @return {boolean} - True if the value is empty\n * example\n * isEmpty([]); // -> true\n * isEmpty({}); // -> true\n */\nconst isEmpty = (val) => {\n\tif (val == null) {\n\t\treturn true;\n\t}\n\n\tif (Array.isArray(val)) {\n\t\treturn val.length === 0;\n\t}\n\n\treturn isObject(val) && Object.keys(val).length === 0;\n};\n\nexport default isEmpty;\n","const isValidString = (possibleString) =>\n\tBoolean(typeof possibleString === 'string' && possibleString.length);\n\nexport default isValidString;\n","import { formatEmailAddress } from 'workers/processExtractedData/utils/contactInfo';\nimport formatProfilePicture from 'workers/processExtractedData/utils/formatProfilePicture';\nimport formatContactIndustries from 'workers/processExtractedData/utils/industries';\nimport {\n\tformatContactEducations,\n\tformatContactLanguages,\n\tformatContactSkills,\n} from 'workers/processExtractedData/utils/experience';\nimport {\n\tformatContactPosition,\n\tparsePositionFromOccupationString,\n} from 'workers/processExtractedData/utils/occupation';\nimport { cleanEmptyNullData, cleanLocationString, cleanUrl } from 'utils/data';\nimport getCurrentPositions from 'utils/getCurrentPositions';\nimport hasResults from 'utils/hasResults';\nimport isValidString from 'utils/isValidString';\nimport uniqueBy from 'utils/collection';\n\n// TODO: move these to a config file\nconst STANDARD_CONTACT_PROFILE_URL_BASE = 'https://www.linkedin.com/in/';\nconst PREMIUM_CONTACT_PROFILE_URL_BASE = 'https://www.linkedin.com/sales/lead/';\nconst RECRUITER_CONTACT_PROFILE_URL_BASE =\n\t'https://www.linkedin.com/talent/search/profile/';\n\nfunction setCompanyNameAndTitle(profile) {\n\tconst _profile = profile;\n\n\tlet companyName;\n\tlet title;\n\tif (hasResults(_profile.positions)) {\n\t\tconst currentPositions = getCurrentPositions(_profile.positions);\n\t\tif (hasResults(currentPositions)) {\n\t\t\t_profile.companyName = currentPositions[0].companyName;\n\t\t\t_profile.title = currentPositions[0].titleName;\n\t\t}\n\t}\n\n\tif ((!_profile.companyName || !_profile.title) && _profile.occupation) {\n\t\t({ companyName, title } = parsePositionFromOccupationString(\n\t\t\t_profile.occupation\n\t\t));\n\t\tif (companyName) {\n\t\t\t_profile.companyName = companyName;\n\t\t}\n\n\t\tif (title) {\n\t\t\t_profile.title = title;\n\t\t}\n\t}\n\n\tif (hasResults(_profile.positions)) {\n\t\tconst currentPositions = getCurrentPositions(_profile.positions);\n\t\tif (\n\t\t\thasResults(currentPositions) &&\n\t\t\t(_profile.companyName !== currentPositions[0].companyName ||\n\t\t\t\t_profile.title !== currentPositions[0].titleName)\n\t\t) {\n\t\t\t_profile.companyName = currentPositions[0].companyName;\n\t\t\t_profile.title = currentPositions[0].titleName;\n\t\t}\n\t}\n\n\treturn _profile;\n}\n\n/**\n * Format the data from a parsed contact object into a Seamless.AI contact object\n * @param {Object} data - Object of parsed contact data\n * @return {Object} Seamless.AI expected contact object format\n */\nconst createSeamlessContact = (data) => {\n\tconst {\n\t\t// LinkedIn Identifiers\n\t\tliMemberId,\n\t\tpublicIdentifier,\n\t\tsalesNavIdentifier,\n\t\trecruiterIdentifier,\n\n\t\t// LinkedIn Profile URLs\n\t\tflagshipProfileUrl,\n\n\t\t// Entity info\n\t\tfirstName,\n\t\tlastName,\n\t\tfullName,\n\t\tbirthDateOn,\n\t\tprofilePicture,\n\t\tsummary,\n\n\t\t// Contact info\n\t\temails,\n\t\tphoneNumbers,\n\t\tprimaryEmail,\n\t\tlocation,\n\t\tsocial,\n\n\t\t// Personal info\n\t\tawards,\n\t\tcertifications,\n\t\tcourses,\n\t\teducations,\n\t\tindustries,\n\t\tlanguages,\n\t\torganizations,\n\t\tpatents,\n\t\tprojects,\n\t\tpublications,\n\t\tskills,\n\t\tvolunteeringExperiences,\n\n\t\t// JobInfo\n\t\toccupation,\n\t\tpositions,\n\t} = data;\n\n\tlet contactName = fullName;\n\tif (!contactName?.length && firstName && lastName) {\n\t\tcontactName = `${firstName} ${lastName}`;\n\t}\n\tconst liProfileUrl =\n\t\tflagshipProfileUrl ||\n\t\t(publicIdentifier &&\n\t\t\t`${STANDARD_CONTACT_PROFILE_URL_BASE}${publicIdentifier}`);\n\tconst liSalesNavUrl =\n\t\tsalesNavIdentifier &&\n\t\t`${PREMIUM_CONTACT_PROFILE_URL_BASE}${salesNavIdentifier}`;\n\tconst liRecruiterUrl =\n\t\trecruiterIdentifier &&\n\t\t`${RECRUITER_CONTACT_PROFILE_URL_BASE}${recruiterIdentifier}`;\n\n\tlet _positions = hasResults(positions)\n\t\t? positions.map(\n\t\t\t\t(position) =>\n\t\t\t\t\ttypeof position === 'object' &&\n\t\t\t\t\tObject.keys(position).length &&\n\t\t\t\t\tformatContactPosition(position)\n\t\t  )\n\t\t: null;\n\n\tif (hasResults(_positions)) {\n\t\t// remove empty\n\t\t_positions = _positions.filter(\n\t\t\t(pos) => !!pos?.companyName && !!pos?.titleName\n\t\t);\n\t\t_positions = uniqueBy(_positions, [\n\t\t\t'companyName',\n\t\t\t'titleName',\n\t\t\t'employmentType',\n\t\t]);\n\t}\n\n\tlet companyName;\n\tlet title;\n\n\tif (occupation) {\n\t\t({ companyName, title } =\n\t\t\tparsePositionFromOccupationString(occupation));\n\t}\n\n\tif (!companyName && positions?.length) {\n\t\tconst latestPosition = positions[0]; // the latest position may not always be the first one. if not, use startDate\n\t\tcompanyName = latestPosition.companyName;\n\t}\n\n\tlet person = {\n\t\t// LinkedIn Identifiers\n\t\tliMemberId,\n\t\tliPublicIdentifier: publicIdentifier && decodeURI(publicIdentifier),\n\t\tliSalesNavId: salesNavIdentifier,\n\t\tliRecruiterId: recruiterIdentifier,\n\n\t\t// LinkedIn Profile URLs\n\t\tliProfileUrl: isValidString(liProfileUrl)\n\t\t\t? cleanUrl(liProfileUrl)\n\t\t\t: null,\n\t\tliSalesNavUrl: isValidString(liSalesNavUrl)\n\t\t\t? cleanUrl(liSalesNavUrl)\n\t\t\t: null,\n\t\tliRecruiterUrl: isValidString(liRecruiterUrl)\n\t\t\t? cleanUrl(liRecruiterUrl)\n\t\t\t: null,\n\n\t\t// Entity Info\n\t\tfirstName,\n\t\tlastName,\n\t\tcontactName,\n\t\tbirthday: birthDateOn,\n\t\tliImageUrl: profilePicture && formatProfilePicture(profilePicture),\n\n\t\t// Contact info\n\t\tcontactEmail: formatEmailAddress(emails, primaryEmail),\n\t\tphoneNumbers,\n\t\tlocationFullString: isValidString(location)\n\t\t\t? cleanLocationString(location)\n\t\t\t: null,\n\t\tsocial,\n\n\t\t// Personal info\n\t\t...(summary && { meta: { summary } }),\n\t\tawards: hasResults(awards) ? awards : null,\n\t\tcertifications: hasResults(certifications) ? certifications : null,\n\t\tcourses: hasResults(courses) ? courses : null,\n\t\teducations: hasResults(educations)\n\t\t\t? formatContactEducations(educations)\n\t\t\t: null,\n\t\tindustries: formatContactIndustries(industries),\n\t\tlanguages: hasResults(languages)\n\t\t\t? formatContactLanguages(languages)\n\t\t\t: null,\n\t\torganizations: hasResults(organizations) ? organizations : null,\n\t\tpatents: hasResults(patents)\n\t\t\t? patents.filter((patent) => !!patent)\n\t\t\t: null,\n\t\tprojects: hasResults(projects)\n\t\t\t? projects.filter((project) => !!project)\n\t\t\t: null,\n\t\tpublications: hasResults(publications)\n\t\t\t? publications.filter((publication) => !!publication)\n\t\t\t: null,\n\t\tskills: hasResults(skills) ? formatContactSkills(skills) : null,\n\t\tvolunteeringExperiences: hasResults(volunteeringExperiences)\n\t\t\t? volunteeringExperiences\n\t\t\t: null,\n\n\t\t// Job info\n\t\tcompanyName,\n\t\ttitle,\n\t\t// company: {\n\t\t// \tname: companyName,\n\t\t// \ttitle,\n\t\t// },\n\t\toccupation,\n\t\tpositions: _positions,\n\t\titemType: 'contact',\n\t};\n\n\tperson = setCompanyNameAndTitle(person);\n\tperson = cleanEmptyNullData(person);\n\treturn person;\n};\n\nexport default createSeamlessContact;\n","// Vanilla JS equivalent to Lodash _uniqBy\nconst uniqueBy = (arr, keys) => {\n\tconst obj = arr.reduce((ac, a) => {\n\t\tconst keyString = keys.map((k) => a[k]).join('-');\n\t\tconst current = ac;\n\t\tcurrent[keyString] = a;\n\t\treturn current;\n\t}, {});\n\n\treturn Object.values(obj);\n};\n\nexport default uniqueBy;\n","const VALID_CONTACT_PRIMARY_PROPERTIES = ['firstName', 'contactName'];\nconst VALID_CONTACT_SECONDARY_PROPERTIES = [\n\t'liRecruiterId',\n\t'liSalesNavId',\n\t'liPublicIdentifier',\n];\n\nconst isValidContact = (contact) => {\n\treturn (\n\t\tVALID_CONTACT_PRIMARY_PROPERTIES.some((prop) =>\n\t\t\tObject.prototype.hasOwnProperty.call(contact, prop)\n\t\t) &&\n\t\tVALID_CONTACT_SECONDARY_PROPERTIES.some((prop) =>\n\t\t\tObject.prototype.hasOwnProperty.call(contact, prop)\n\t\t) &&\n\t\tVALID_CONTACT_PRIMARY_PROPERTIES.every(\n\t\t\t(prop) => !contact[prop]?.toLowerCase().includes('linkedin member')\n\t\t)\n\t);\n};\n\nexport default isValidContact;\n","import {\n\tgetMemberIdFromUrn,\n\tgetSalesNavIdFromUrn,\n} from 'workers/processExtractedData/utils/identifiers';\nimport createSeamlessContact from 'workers/processExtractedData/utils/createSeamlessContact';\nimport { standardContact } from 'workers/processExtractedData/recipeTypes';\n\nconst {\n\tIDENTITY_FULL_PROFILE_RECIPE_TYPE,\n\tFULL_PROFILE_RECIPE_TYPE,\n\tTOP_CARD_SUPPLEMENTARY_RECIPE_TYPE,\n} = standardContact;\n\nconst STANDARD_CONTACT_PROFILE_ITEMS_TYPE_MAP = {\n\teducation: 'profile.education',\n\tgeoLocation: 'common.geo',\n\tindustry: 'common.industry',\n\tlanguage: 'profile.language',\n\tpatent: 'profile.patent',\n\tposition: 'profile.position',\n\tpositionGroup: 'profile.positiongroup',\n\tproject: 'profile.project',\n\tpublication: 'profile.publication',\n\tskill: 'profile.skill',\n};\n\nconst findOrFilterCollectionItems = (items, method = 'find', typeMatch) => {\n\treturn items[method]((item) =>\n\t\titem.$type?.toLowerCase().includes(typeMatch)\n\t);\n};\n\nconst parseStandardContactProfile = (data) => {\n\tconst collectionProfile = data.find((item) =>\n\t\t[\n\t\t\tIDENTITY_FULL_PROFILE_RECIPE_TYPE,\n\t\t\tFULL_PROFILE_RECIPE_TYPE,\n\t\t\tTOP_CARD_SUPPLEMENTARY_RECIPE_TYPE,\n\t\t].some((type) => item.$recipeTypes?.includes(type))\n\t);\n\n\tif (!collectionProfile || !collectionProfile.publicIdentifier) {\n\t\treturn null;\n\t}\n\n\tconst {\n\t\taddress,\n\t\tbirthDateOn,\n\t\tprofilePicture,\n\t\tentityUrn,\n\t\tfirstName,\n\t\theadline,\n\t\tlastName,\n\t\tobjectUrn,\n\t\tpublicIdentifier,\n\t\tsummary,\n\t} = collectionProfile;\n\n\tlet locationFullString = address;\n\tconst collectionGeoLocation = data.find(\n\t\t(item) =>\n\t\t\titem.$type\n\t\t\t\t?.toLowerCase()\n\t\t\t\t.includes(\n\t\t\t\t\tSTANDARD_CONTACT_PROFILE_ITEMS_TYPE_MAP.geoLocation\n\t\t\t\t) && item.defaultLocalizedNameWithoutCountryName\n\t);\n\tif (!locationFullString && collectionGeoLocation?.defaultLocalizedName) {\n\t\tlocationFullString =\n\t\t\tcollectionGeoLocation && collectionGeoLocation.defaultLocalizedName;\n\t}\n\n\tconst personData = {\n\t\t// LinkedIn Identifiers\n\t\tliMemberId: objectUrn && getMemberIdFromUrn(objectUrn),\n\t\tpublicIdentifier,\n\t\tsalesNavIdentifier: getSalesNavIdFromUrn(entityUrn),\n\n\t\t// Entity info\n\t\tfirstName,\n\t\tlastName,\n\t\tprofilePicture: profilePicture?.displayImageReference?.vectorImage,\n\t\tbirthDateOn,\n\n\t\t// Contact info\n\t\tlocation: locationFullString,\n\n\t\t// Personal info\n\t\tsummary,\n\t\teducations: findOrFilterCollectionItems(\n\t\t\tdata,\n\t\t\t'filter',\n\t\t\tSTANDARD_CONTACT_PROFILE_ITEMS_TYPE_MAP.education\n\t\t),\n\t\tindustries: findOrFilterCollectionItems(\n\t\t\tdata,\n\t\t\t'filter',\n\t\t\tSTANDARD_CONTACT_PROFILE_ITEMS_TYPE_MAP.industry\n\t\t),\n\t\tlanguages: findOrFilterCollectionItems(\n\t\t\tdata,\n\t\t\t'filter',\n\t\t\tSTANDARD_CONTACT_PROFILE_ITEMS_TYPE_MAP.language\n\t\t),\n\t\tpatents: findOrFilterCollectionItems(\n\t\t\tdata,\n\t\t\t'filter',\n\t\t\tSTANDARD_CONTACT_PROFILE_ITEMS_TYPE_MAP.patent\n\t\t),\n\t\tprojects: findOrFilterCollectionItems(\n\t\t\tdata,\n\t\t\t'filter',\n\t\t\tSTANDARD_CONTACT_PROFILE_ITEMS_TYPE_MAP.project\n\t\t),\n\t\tpublications: findOrFilterCollectionItems(\n\t\t\tdata,\n\t\t\t'filter',\n\t\t\tSTANDARD_CONTACT_PROFILE_ITEMS_TYPE_MAP.publication\n\t\t),\n\t\tskills: findOrFilterCollectionItems(\n\t\t\tdata,\n\t\t\t'filter',\n\t\t\tSTANDARD_CONTACT_PROFILE_ITEMS_TYPE_MAP.skill\n\t\t),\n\n\t\t// Job info\n\t\toccupation: headline,\n\t\tpositions: data.filter(\n\t\t\t(item) =>\n\t\t\t\titem.$type\n\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t.includes(\n\t\t\t\t\t\tSTANDARD_CONTACT_PROFILE_ITEMS_TYPE_MAP.position\n\t\t\t\t\t) &&\n\t\t\t\t!item.$type\n\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t.includes(\n\t\t\t\t\t\tSTANDARD_CONTACT_PROFILE_ITEMS_TYPE_MAP.positionGroup\n\t\t\t\t\t)\n\t\t),\n\t};\n\n\tconst parsedContact = createSeamlessContact(personData);\n\tparsedContact.pageSectionSourced = 'standardContactProfile';\n\tparsedContact.itemType = 'contact';\n\treturn parsedContact;\n};\n\nexport default parseStandardContactProfile;\n","import {\n\tgetMemberIdFromUrn,\n\tgetSalesNavIdFromUrn,\n} from 'workers/processExtractedData/utils/identifiers';\nimport createSeamlessContact from 'workers/processExtractedData/utils/createSeamlessContact';\nimport isValidContact from 'utils/isValidContact';\n\nconst parseStandardContactRecommendations = (item, pageSectionSourced) => {\n\tconst {\n\t\tentityUrn,\n\t\tfirstName,\n\t\tlastName,\n\t\tobjectUrn,\n\t\toccupation,\n\t\tpicture,\n\t\tpublicIdentifier,\n\t} = item;\n\n\tconst contactOpts = {\n\t\tliMemberId: getMemberIdFromUrn(objectUrn),\n\t\tpublicIdentifier,\n\t\tsalesNavIdentifier: getSalesNavIdFromUrn(entityUrn),\n\t\tfirstName,\n\t\tlastName,\n\t\tprofilePicture: picture,\n\t\toccupation,\n\t};\n\n\tconst parsedContact = createSeamlessContact(contactOpts);\n\tparsedContact.pageSectionSourced = pageSectionSourced;\n\tparsedContact.itemType = 'contact';\n\treturn isValidContact(parsedContact) ? parsedContact : null;\n};\n\nexport default parseStandardContactRecommendations;\n","// creating this since we'll inevitably have to parse or format the\n// text but for now it seems to not need any changes\nconst parseTitleText = (text) => {\n\tif (!text) {\n\t\treturn '';\n\t}\n\n\treturn text;\n};\n\nconst companyNameRegex = /(?<name>.[^·]+)?·?(?<status>.+)?/i;\nconst parseCompanyNameText = (text) => {\n\tif (!text) {\n\t\treturn '';\n\t}\n\n\tconst textMatch = text?.match(companyNameRegex);\n\tconst { name } = textMatch?.groups || {};\n\n\treturn name?.trim() || '';\n};\n\nconst liMonthMap = {\n\tJan: 1,\n\tFeb: 2,\n\tMar: 3,\n\tApr: 4,\n\tMay: 5,\n\tJun: 6,\n\tJul: 7,\n\tAug: 8,\n\tSep: 9,\n\tOct: 10,\n\tNov: 11,\n\tDec: 12,\n};\n\n// Sep 2017 - Present · 4 yrs 6 mos\nconst dateRangeRegex =\n\t/(?<start>[a-zA-z]{3}\\s\\d{4})\\s-\\s(?<end>[a-zA-z]{3}\\s\\d{4}|Present)/i;\n// Sep 2017\nconst dateRegex = /(?<month>[a-zA-z]{3})\\s(?<year>\\d{4})/i;\n// 2017\nconst dateOnlyRegex = /(?<year>^\\d{4})/i;\nconst parseDateRangeText = (text) => {\n\tif (!text) {\n\t\treturn {};\n\t}\n\n\tlet startData;\n\tlet endData;\n\n\t// parses date range\n\tconst dateRangeMatch = text.match(dateRangeRegex);\n\tif (dateRangeMatch) {\n\t\tconst { start, end } = dateRangeMatch?.groups || {};\n\n\t\tconst startDateMatch = start?.match(dateRegex);\n\t\tconst { month: startMonth, year: startYear } =\n\t\t\tstartDateMatch?.groups || {};\n\n\t\tconst endDateMatch = end?.match(dateRegex);\n\t\tconst { month: endMonth, year: endYear } = endDateMatch?.groups || {};\n\n\t\tif (startMonth && startYear) {\n\t\t\tstartData = {\n\t\t\t\tmonth: liMonthMap[startMonth],\n\t\t\t\tyear: ~~startYear,\n\t\t\t};\n\t\t}\n\n\t\tif (endMonth && endYear) {\n\t\t\tendData = {\n\t\t\t\tmonth: liMonthMap[endMonth],\n\t\t\t\tyear: ~~endYear,\n\t\t\t};\n\t\t}\n\t}\n\n\t// parses just a year, often seen with positions that were 'less than a year'\n\tconst dateOnlyMatch = text.match(dateOnlyRegex);\n\tif (dateOnlyMatch && !dateRangeMatch) {\n\t\tconst { year } = dateOnlyMatch?.groups || {};\n\t\tconst date = {\n\t\t\tmonth: 1,\n\t\t\tyear: ~~year,\n\t\t};\n\n\t\tstartData = date;\n\t\tendData = date;\n\t}\n\n\treturn {\n\t\tstart: startData,\n\t\tend: endData,\n\t};\n};\n\nexport { parseTitleText, parseCompanyNameText, parseDateRangeText };\n","// TODO: we'll need to put this somewhere else later but starting a config for\n// the different element sections we use while parsing graphQL data\nconst entityUrnTypes = {\n\tpositions: 'EXPERIENCE',\n};\n\nexport default entityUrnTypes;\n","import { expose } from 'comlink';\nimport parseStandardContactPeopleAlsoViewed from 'workers/processExtractedData/processStandardContactProfileData/parseStandardContactPeopleAlsoViewed';\nimport parseStandardContactPeopleYouMayKnow from 'workers/processExtractedData/processStandardContactProfileData/parseStandardContactPeopleYouMayKnow';\nimport parseStandardContactProfile from 'workers/processExtractedData/processStandardContactProfileData/parseStandardContactProfile';\nimport parseStandardContactRecommendations from 'workers/processExtractedData/processStandardContactProfileData/parseStandardContactRecommendations';\nimport parsePositionsGraphQlData from 'workers/processExtractedData/processStandardContactProfileData/parsePositionsGraphQlData';\nimport { standardContact } from 'workers/processExtractedData/recipeTypes';\nimport entityUrnTypes from 'workers/processExtractedData/entityUrnTypes';\nimport { parseElementUrn } from 'workers/processExtractedData/utils/identifiers';\n\nconst {\n\tIDENTITY_FULL_PROFILE_RECIPE_TYPE,\n\tFULL_PROFILE_RECIPE_TYPE,\n\tTOP_CARD_SUPPLEMENTARY_RECIPE_TYPE,\n\tPROFILE_RECOMMENDATIONS_RECEIVED_METADATA_TYPE,\n\tPROFILE_RECOMMENDATIONS_GIVEN_INCLUDED_PROP,\n\tPROFILE_PEOPLE_MAY_KNOW_ELEMENTS_URN,\n\tPROFILE_PEOPLE_ALSO_VIEWED_METADATA_TYPE,\n\tTYPE_MINI_PROFILE,\n\tTYPE_NORMALIZED_PROFILE,\n\tPROFILE_PEOPLE_ALSO_VIEWED_RECIPE_TYPE,\n} = standardContact;\n\nfunction hasStandardContactProfileData(data) {\n\treturn data.included?.some(\n\t\t(item) =>\n\t\t\titem.$recipeTypes &&\n\t\t\t[\n\t\t\t\tIDENTITY_FULL_PROFILE_RECIPE_TYPE,\n\t\t\t\tFULL_PROFILE_RECIPE_TYPE,\n\t\t\t\tTOP_CARD_SUPPLEMENTARY_RECIPE_TYPE,\n\t\t\t].some((type) => item.$recipeTypes.includes(type))\n\t);\n}\n\nfunction hasStandardContactRecommendationsReceivedData(data) {\n\treturn (\n\t\tdata.data?.metadata?.$type ===\n\t\tPROFILE_RECOMMENDATIONS_RECEIVED_METADATA_TYPE\n\t);\n}\n\nfunction hasStandardContactRecommendationsGivenData(data) {\n\treturn data.data?.included?.some((item) =>\n\t\tObject.prototype.hasOwnProperty.call(\n\t\t\titem,\n\t\t\tPROFILE_RECOMMENDATIONS_GIVEN_INCLUDED_PROP\n\t\t)\n\t);\n}\n\nfunction hasStandardContactPeopleYouMayKnowData(data) {\n\treturn data.data?.['*elements']?.some?.((element) =>\n\t\telement.includes(PROFILE_PEOPLE_MAY_KNOW_ELEMENTS_URN)\n\t);\n}\n\nfunction hasStandardContactPeopleAlsoViewedData(data) {\n\treturn PROFILE_PEOPLE_ALSO_VIEWED_METADATA_TYPE.includes(\n\t\tdata.data?.metadata?.$type\n\t);\n}\n\nfunction hasPositionsGraphQlData(data) {\n\treturn data?.data?.data?.identityDashProfileCardsByViewee?.[\n\t\t'*elements'\n\t]?.some((entityUrn) => {\n\t\t// parse the urn for the element type\n\t\tconst { elementType } = parseElementUrn(entityUrn) || {};\n\n\t\t// verify the element type is for the element we are looking for\n\t\treturn elementType === entityUrnTypes.positions;\n\t});\n}\n\nconst processStandardContactProfileData = async (pageData) => {\n\tlet contactParsers = [];\n\tlet parsedItems = [];\n\tlet profileUrlOverride;\n\n\tif (\n\t\thasStandardContactRecommendationsReceivedData(\n\t\t\tpageData,\n\t\t\t'parseStandardContactRecommendationsReceived'\n\t\t)\n\t) {\n\t\tconst contactItems = pageData.included.filter(\n\t\t\t(item) => item.$type === TYPE_MINI_PROFILE\n\t\t);\n\t\tif (contactItems?.length) {\n\t\t\tcontactParsers = contactItems.map((item) =>\n\t\t\t\tparseStandardContactRecommendations(item)\n\t\t\t);\n\t\t}\n\t} else if (\n\t\thasStandardContactRecommendationsGivenData(\n\t\t\tpageData,\n\t\t\t'parseStandardContactRecommendationsGiven'\n\t\t)\n\t) {\n\t\tconst contactItems = pageData.included.filter(\n\t\t\t(item) => item.$type === TYPE_MINI_PROFILE\n\t\t);\n\t\tif (contactItems?.length) {\n\t\t\tcontactParsers = contactItems.map((item) =>\n\t\t\t\tparseStandardContactRecommendations(item)\n\t\t\t);\n\t\t}\n\t} else if (hasStandardContactPeopleYouMayKnowData(pageData)) {\n\t\tconst contactItems = pageData.included.filter(\n\t\t\t(item) =>\n\t\t\t\titem.$type &&\n\t\t\t\t[TYPE_MINI_PROFILE, TYPE_NORMALIZED_PROFILE].indexOf(\n\t\t\t\t\titem.$type\n\t\t\t\t) !== -1\n\t\t);\n\t\tif (contactItems?.length) {\n\t\t\tcontactParsers = contactItems.map((item) =>\n\t\t\t\tparseStandardContactPeopleYouMayKnow(item)\n\t\t\t);\n\t\t}\n\t} else if (hasStandardContactPeopleAlsoViewedData(pageData)) {\n\t\tconst contactItems = pageData.included.filter(\n\t\t\t(item) =>\n\t\t\t\titem?.$type === TYPE_MINI_PROFILE ||\n\t\t\t\titem?.$recipeTypes.some((rt) =>\n\t\t\t\t\trt.includes(PROFILE_PEOPLE_ALSO_VIEWED_RECIPE_TYPE)\n\t\t\t\t)\n\t\t);\n\n\t\tif (contactItems?.length) {\n\t\t\tcontactParsers = contactItems.map((item) =>\n\t\t\t\tparseStandardContactPeopleAlsoViewed(item)\n\t\t\t);\n\t\t}\n\t} else if (hasStandardContactProfileData(pageData)) {\n\t\tconst standardContactProfileData = parseStandardContactProfile(\n\t\t\tpageData.included\n\t\t);\n\t\tif (standardContactProfileData) {\n\t\t\tprofileUrlOverride =\n\t\t\t\tstandardContactProfileData?.liProfileUrl || null;\n\t\t\tparsedItems = [standardContactProfileData];\n\t\t}\n\t} else if (hasPositionsGraphQlData(pageData)) {\n\t\tconst standardContactProfileData = parsePositionsGraphQlData(\n\t\t\tpageData.included\n\t\t);\n\n\t\tif (standardContactProfileData) {\n\t\t\tparsedItems = [standardContactProfileData];\n\t\t}\n\t}\n\n\tif (contactParsers.length) {\n\t\tparsedItems = await Promise.all(contactParsers);\n\t}\n\n\treturn {\n\t\tprofileUrlOverride,\n\t\tpagingData: null,\n\t\tparsedItems,\n\t};\n};\n\nexpose(processStandardContactProfileData, self);\n","import {\n\tgetMemberIdFromUrn,\n\tgetSalesNavIdFromUrn,\n} from 'workers/processExtractedData/utils/identifiers';\nimport createSeamlessContact from 'workers/processExtractedData/utils/createSeamlessContact';\nimport isValidContact from 'utils/isValidContact';\n\nconst parseStandardContactPeopleYouMayKnow = (item) => {\n\tconst {\n\t\tentityUrn,\n\t\tfirstName,\n\t\tlastName,\n\t\tobjectUrn,\n\t\toccupation,\n\t\tpicture,\n\t\tpublicIdentifier,\n\t} = item;\n\n\tconst contactOpts = {\n\t\tliMemberId: getMemberIdFromUrn(objectUrn),\n\t\tpublicIdentifier,\n\t\tsalesNavIdentifier: getSalesNavIdFromUrn(entityUrn),\n\t\tfirstName,\n\t\tlastName,\n\t\tprofilePicture: picture,\n\t\toccupation,\n\t};\n\n\tconst parsedContact = createSeamlessContact(contactOpts);\n\tparsedContact.pageSectionSourced = 'standardContactPeopleYouMayKnow';\n\tparsedContact.itemType = 'contact';\n\treturn isValidContact(parsedContact) ? parsedContact : null;\n};\n\nexport default parseStandardContactPeopleYouMayKnow;\n","import {\n\tgetMemberIdFromUrn,\n\tgetSalesNavIdFromUrn,\n} from 'workers/processExtractedData/utils/identifiers';\nimport createSeamlessContact from 'workers/processExtractedData/utils/createSeamlessContact';\nimport isValidContact from 'utils/isValidContact';\n\nconst parseStandardContactPeopleAlsoViewed = (item) => {\n\tconst {\n\t\tentityUrn,\n\t\tfirstName,\n\t\tlastName,\n\t\tobjectUrn,\n\t\toccupation,\n\t\theadline,\n\t\tpicture,\n\t\tpublicIdentifier,\n\t} = item;\n\n\tconst contactOpts = {\n\t\tliMemberId: getMemberIdFromUrn(objectUrn),\n\t\tpublicIdentifier,\n\t\tsalesNavIdentifier: getSalesNavIdFromUrn(entityUrn),\n\t\tfirstName,\n\t\tlastName,\n\t\tprofilePicture: picture,\n\t\toccupation: occupation || headline,\n\t};\n\n\tconst parsedContact = createSeamlessContact(contactOpts);\n\tparsedContact.pageSectionSourced = 'standardContactPeopleAlsoViewed';\n\tparsedContact.itemType = 'contact';\n\treturn isValidContact(parsedContact) ? parsedContact : null;\n};\n\nexport default parseStandardContactPeopleAlsoViewed;\n","import createSeamlessContact from 'workers/processExtractedData/utils/createSeamlessContact';\nimport {\n\tgetSalesNavIdFromUrn,\n\tparseElementUrn,\n} from 'workers/processExtractedData/utils/identifiers';\nimport {\n\tparseTitleText,\n\tparseCompanyNameText,\n\tparseDateRangeText,\n} from 'workers/processExtractedData/utils/graphQlTextParsers';\nimport entityUrnTypes from 'workers/processExtractedData/entityUrnTypes';\n\nconst parsePositionsGraphQlData = (data) => {\n\tconst positionsElement = data?.find((element) => {\n\t\t// get the entity urn from the list of elements\n\t\tconst entityUrn = element?.entityUrn || '';\n\n\t\t// parse the urn for the element type\n\t\tconst { elementType } = parseElementUrn(entityUrn) || {};\n\n\t\t// verify the element type is for the element we are looking for\n\t\treturn elementType === entityUrnTypes.positions;\n\t});\n\n\tconst { entityUrn, topComponents } = positionsElement || {};\n\t// header element is in 0 and the list of companies is in 1\n\tconst positionsGroupElement = topComponents?.[1];\n\n\t// we can move this prop drill down to a config\n\tconst positionsList =\n\t\tpositionsGroupElement?.components?.fixedListComponent?.components || [];\n\n\tconst positions = positionsList.reduce((acc, el) => {\n\t\t// another prop drill down to the data we can add to a config\n\t\tconst companyData = el?.components?.entityComponent || {};\n\n\t\tconst { title, caption, subtitle, subComponents } = companyData;\n\n\t\t// the position element can be a single company/postion or a company with multiple postions\n\t\t// nested in it with start and end dates\n\t\tconst hasMultiplePositions = subComponents?.components?.every(\n\t\t\t(subComp) => !!subComp?.components?.entityComponent\n\t\t);\n\n\t\t// parse the multiple positions for this company\n\t\tif (hasMultiplePositions) {\n\t\t\tconst companyPositions = subComponents?.components?.map((posEl) => {\n\t\t\t\tconst posData = posEl?.components?.entityComponent || {};\n\n\t\t\t\treturn {\n\t\t\t\t\ttitle: parseTitleText(posData?.title?.text),\n\t\t\t\t\tdateRange: parseDateRangeText(posData?.caption?.text),\n\t\t\t\t\tcompanyName: parseCompanyNameText(title?.text),\n\t\t\t\t};\n\t\t\t});\n\n\t\t\treturn acc.concat(companyPositions);\n\t\t}\n\n\t\t// parse single company and position\n\t\tconst rawTitle = title?.text;\n\t\tconst rawDateRange = caption?.text;\n\t\tconst rawCompany = subtitle?.text;\n\n\t\treturn [\n\t\t\t...acc,\n\t\t\t{\n\t\t\t\ttitle: parseTitleText(rawTitle),\n\t\t\t\tdateRange: parseDateRangeText(rawDateRange),\n\t\t\t\tcompanyName: parseCompanyNameText(rawCompany),\n\t\t\t},\n\t\t];\n\t}, []);\n\n\tconst personData = {\n\t\tsalesNavIdentifier: getSalesNavIdFromUrn(entityUrn),\n\t\tpositions,\n\t};\n\n\tconst parsedContact = createSeamlessContact(personData);\n\tparsedContact.pageSectionSourced = 'standardContactProfile';\n\tparsedContact.itemType = 'contact';\n\treturn parsedContact;\n};\n\nexport default parsePositionsGraphQlData;\n"],"names":["module","exports","standardContact","TYPE_MINI_PROFILE","TYPE_NORMALIZED_PROFILE","PROFILE_RECOMMENDATIONS_RECEIVED_METADATA_TYPE","PROFILE_RECOMMENDATIONS_GIVEN_INCLUDED_PROP","PROFILE_PEOPLE_MAY_KNOW_ELEMENTS_URN","PROFILE_PEOPLE_ALSO_VIEWED_RECIPE_TYPE","PROFILE_PEOPLE_ALSO_VIEWED_METADATA_TYPE","IDENTITY_FULL_PROFILE_RECIPE_TYPE","FULL_PROFILE_RECIPE_TYPE","TOP_CARD_SUPPLEMENTARY_RECIPE_TYPE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","proxyMarker","Symbol","createEndpoint","releaseProxy","throwMarker","val","transferHandlers","Map","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","start","createProxy","target","value","serialized","Error","isError","message","name","stack","Object","assign","ep","self","addEventListener","callback","ev","data","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfers","transferCache","set","transfer","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","endpoint","constructor","isMessagePort","close","throwIfProxyReleased","isReleased","isProxyReleased","Proxy","get","_target","requestResponseMessage","p","toString","length","r","bind","_thisArg","rawArgumentList","last","processArguments","construct","processed","v","arr","Array","prototype","concat","WeakMap","handler","serializedValue","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l","GET_MEMBER_ID_FROM_URN_REG_EXP","SALES_NAV_ID_FROM_URN_REG_EXP","getMemberIdFromUrn","urn","match","groups","memberId","getSalesNavIdFromUrn","salesNavId","parseElementUrn","elementUrnMatchObj","liSalesNavId","elementType","formatEmailAddress","emails","primaryEmail","emailAddress","isArray","err","cleanEmptyNullData","cleanedData","entries","forEach","k","keys","splice","cleanLocationString","locationString","replace","cleanUrl","url","newUrl","trim","test","profilePicture","picture","artifacts","rootUrl","includes","fileIdentifyingUrlPathSegment","industries","formattedIndustries","values","ind","industry","push","formatContactEducations","educations","filter","education","schoolName","degree","degreeName","activities","fieldOfStudy","dateRange","year","dateRangeStartYear","end","dateRangeEndYear","startedOn","startedOnYear","endedOn","endedOnYear","endDateOn","endDateOnYear","startDateOn","startDateOnYear","startDateYear","endDateYear","startYear","endYear","fieldsOfStudy","educationFieldOfStudy","companyName","ensureArray","startDate","endDate","formatContactSkills","skills","skillsArr","skill","_skills","formatContactLanguages","languages","languagesArr","language","_languages","parsePositionFromOccupationString","occupation","occupationParts","indexOf","split","title","pop","getCurrentPositions","positions","current","isObject","possibleString","Boolean","liMemberId","publicIdentifier","salesNavIdentifier","recruiterIdentifier","flagshipProfileUrl","firstName","lastName","fullName","birthDateOn","summary","phoneNumbers","location","social","awards","certifications","courses","organizations","patents","projects","publications","volunteeringExperiences","contactName","liProfileUrl","liSalesNavUrl","liRecruiterUrl","_positions","hasResults","position","company","companyUrn","companyUrnResolutionResult","companyResolutionResult","description","employmentType","locationName","companyUrnLocation","_industries","_dateRangeStart","_dateRangeStartDate","_dateRangeEndDate","_dateRangeEnd","_companyUrn","_location","displayName","month","fullString","linkedInCompanyId","titleName","formatContactPosition","pos","ac","a","uniqueBy","person","liPublicIdentifier","decodeURI","liRecruiterId","isValidString","birthday","liImageUrl","formatProfilePicture","contactEmail","locationFullString","meta","formatContactIndustries","patent","project","publication","itemType","profile","_profile","currentPositions","setCompanyNameAndTitle","VALID_CONTACT_PRIMARY_PROPERTIES","VALID_CONTACT_SECONDARY_PROPERTIES","contact","some","hasOwnProperty","call","every","toLowerCase","findOrFilterCollectionItems","items","method","typeMatch","item","$type","pageSectionSourced","entityUrn","objectUrn","contactOpts","parsedContact","createSeamlessContact","isValidContact","parseTitleText","text","companyNameRegex","parseCompanyNameText","textMatch","liMonthMap","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","dateRangeRegex","dateRegex","dateOnlyRegex","parseDateRangeText","startData","endData","dateRangeMatch","startDateMatch","startMonth","endDateMatch","endMonth","dateOnlyMatch","date","async","profileUrlOverride","contactParsers","parsedItems","pageData","metadata","contactItems","included","parseStandardContactRecommendations","element","hasStandardContactPeopleYouMayKnowData","parseStandardContactPeopleYouMayKnow","hasStandardContactPeopleAlsoViewedData","$recipeTypes","rt","headline","parseStandardContactPeopleAlsoViewed","hasStandardContactProfileData","standardContactProfileData","collectionProfile","find","address","collectionGeoLocation","defaultLocalizedNameWithoutCountryName","defaultLocalizedName","personData","displayImageReference","vectorImage","parseStandardContactProfile","identityDashProfileCardsByViewee","entityUrnTypes","hasPositionsGraphQlData","positionsElement","topComponents","positionsGroupElement","components","fixedListComponent","acc","el","companyData","entityComponent","caption","subtitle","subComponents","hasMultiplePositions","subComp","companyPositions","posEl","posData","rawTitle","rawDateRange","rawCompany","parsePositionsGraphQlData","all","pagingData"],"sourceRoot":""}