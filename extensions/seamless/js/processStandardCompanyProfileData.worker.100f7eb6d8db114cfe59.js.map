{"version":3,"file":"js/processStandardCompanyProfileData.worker.100f7eb6d8db114cfe59.js","mappings":"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","sources":["webpack://@seamless/chrome-extension/../../node_modules/comlink/dist/esm/comlink.mjs","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/identifiers.js","webpack://@seamless/chrome-extension/../../modules/core/src/utils/ensureArray.js","webpack://@seamless/chrome-extension/./src/utils/data.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/occupation.js","webpack://@seamless/chrome-extension/./src/utils/coreDupes/isObject.js","webpack://@seamless/chrome-extension/./src/utils/coreDupes/isEmpty.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/contactInfo.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/formatProfilePicture.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/industries.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/experience.js","webpack://@seamless/chrome-extension/./src/utils/getCurrentPositions.js","webpack://@seamless/chrome-extension/./src/utils/hasResults.js","webpack://@seamless/chrome-extension/./src/utils/isValidString.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/createSeamlessContact.js","webpack://@seamless/chrome-extension/./src/utils/collection.js","webpack://@seamless/chrome-extension/./src/utils/isValidContact.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/processStandardCompanyProfileData/parseStandardCompanyPeopleYouMayKnow.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/organization.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/createSeamlessCompany.js","webpack://@seamless/chrome-extension/./src/utils/number.js","webpack://@seamless/chrome-extension/./src/utils/isValidCompany.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/processStandardCompanyProfileData/parseStandardCompanyProfile.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/processStandardCompanyProfileData/processStandardCompanyProfileData.worker.js"],"sourcesContent":["/**\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst proxyMarker = Symbol(\"Comlink.proxy\");\r\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\r\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\r\nconst throwMarker = Symbol(\"Comlink.thrown\");\r\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\r\n/**\r\n * Internal transfer handle to handle objects marked to proxy.\r\n */\r\nconst proxyTransferHandler = {\r\n    canHandle: (val) => isObject(val) && val[proxyMarker],\r\n    serialize(obj) {\r\n        const { port1, port2 } = new MessageChannel();\r\n        expose(obj, port1);\r\n        return [port2, [port2]];\r\n    },\r\n    deserialize(port) {\r\n        port.start();\r\n        return wrap(port);\r\n    },\r\n};\r\n/**\r\n * Internal transfer handler to handle thrown exceptions.\r\n */\r\nconst throwTransferHandler = {\r\n    canHandle: (value) => isObject(value) && throwMarker in value,\r\n    serialize({ value }) {\r\n        let serialized;\r\n        if (value instanceof Error) {\r\n            serialized = {\r\n                isError: true,\r\n                value: {\r\n                    message: value.message,\r\n                    name: value.name,\r\n                    stack: value.stack,\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            serialized = { isError: false, value };\r\n        }\r\n        return [serialized, []];\r\n    },\r\n    deserialize(serialized) {\r\n        if (serialized.isError) {\r\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\r\n        }\r\n        throw serialized.value;\r\n    },\r\n};\r\n/**\r\n * Allows customizing the serialization of certain values.\r\n */\r\nconst transferHandlers = new Map([\r\n    [\"proxy\", proxyTransferHandler],\r\n    [\"throw\", throwTransferHandler],\r\n]);\r\nfunction expose(obj, ep = self) {\r\n    ep.addEventListener(\"message\", function callback(ev) {\r\n        if (!ev || !ev.data) {\r\n            return;\r\n        }\r\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\r\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\r\n        let returnValue;\r\n        try {\r\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\r\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\r\n            switch (type) {\r\n                case \"GET\" /* GET */:\r\n                    {\r\n                        returnValue = rawValue;\r\n                    }\r\n                    break;\r\n                case \"SET\" /* SET */:\r\n                    {\r\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\r\n                        returnValue = true;\r\n                    }\r\n                    break;\r\n                case \"APPLY\" /* APPLY */:\r\n                    {\r\n                        returnValue = rawValue.apply(parent, argumentList);\r\n                    }\r\n                    break;\r\n                case \"CONSTRUCT\" /* CONSTRUCT */:\r\n                    {\r\n                        const value = new rawValue(...argumentList);\r\n                        returnValue = proxy(value);\r\n                    }\r\n                    break;\r\n                case \"ENDPOINT\" /* ENDPOINT */:\r\n                    {\r\n                        const { port1, port2 } = new MessageChannel();\r\n                        expose(obj, port2);\r\n                        returnValue = transfer(port1, [port1]);\r\n                    }\r\n                    break;\r\n                case \"RELEASE\" /* RELEASE */:\r\n                    {\r\n                        returnValue = undefined;\r\n                    }\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n        }\r\n        catch (value) {\r\n            returnValue = { value, [throwMarker]: 0 };\r\n        }\r\n        Promise.resolve(returnValue)\r\n            .catch((value) => {\r\n            return { value, [throwMarker]: 0 };\r\n        })\r\n            .then((returnValue) => {\r\n            const [wireValue, transferables] = toWireValue(returnValue);\r\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\r\n            if (type === \"RELEASE\" /* RELEASE */) {\r\n                // detach and deactive after sending release response above.\r\n                ep.removeEventListener(\"message\", callback);\r\n                closeEndPoint(ep);\r\n            }\r\n        });\r\n    });\r\n    if (ep.start) {\r\n        ep.start();\r\n    }\r\n}\r\nfunction isMessagePort(endpoint) {\r\n    return endpoint.constructor.name === \"MessagePort\";\r\n}\r\nfunction closeEndPoint(endpoint) {\r\n    if (isMessagePort(endpoint))\r\n        endpoint.close();\r\n}\r\nfunction wrap(ep, target) {\r\n    return createProxy(ep, [], target);\r\n}\r\nfunction throwIfProxyReleased(isReleased) {\r\n    if (isReleased) {\r\n        throw new Error(\"Proxy has been released and is not useable\");\r\n    }\r\n}\r\nfunction createProxy(ep, path = [], target = function () { }) {\r\n    let isProxyReleased = false;\r\n    const proxy = new Proxy(target, {\r\n        get(_target, prop) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            if (prop === releaseProxy) {\r\n                return () => {\r\n                    return requestResponseMessage(ep, {\r\n                        type: \"RELEASE\" /* RELEASE */,\r\n                        path: path.map((p) => p.toString()),\r\n                    }).then(() => {\r\n                        closeEndPoint(ep);\r\n                        isProxyReleased = true;\r\n                    });\r\n                };\r\n            }\r\n            if (prop === \"then\") {\r\n                if (path.length === 0) {\r\n                    return { then: () => proxy };\r\n                }\r\n                const r = requestResponseMessage(ep, {\r\n                    type: \"GET\" /* GET */,\r\n                    path: path.map((p) => p.toString()),\r\n                }).then(fromWireValue);\r\n                return r.then.bind(r);\r\n            }\r\n            return createProxy(ep, [...path, prop]);\r\n        },\r\n        set(_target, prop, rawValue) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\r\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\r\n            const [value, transferables] = toWireValue(rawValue);\r\n            return requestResponseMessage(ep, {\r\n                type: \"SET\" /* SET */,\r\n                path: [...path, prop].map((p) => p.toString()),\r\n                value,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        apply(_target, _thisArg, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const last = path[path.length - 1];\r\n            if (last === createEndpoint) {\r\n                return requestResponseMessage(ep, {\r\n                    type: \"ENDPOINT\" /* ENDPOINT */,\r\n                }).then(fromWireValue);\r\n            }\r\n            // We just pretend that `bind()` didn’t happen.\r\n            if (last === \"bind\") {\r\n                return createProxy(ep, path.slice(0, -1));\r\n            }\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: \"APPLY\" /* APPLY */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        construct(_target, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: \"CONSTRUCT\" /* CONSTRUCT */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n    });\r\n    return proxy;\r\n}\r\nfunction myFlat(arr) {\r\n    return Array.prototype.concat.apply([], arr);\r\n}\r\nfunction processArguments(argumentList) {\r\n    const processed = argumentList.map(toWireValue);\r\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\r\n}\r\nconst transferCache = new WeakMap();\r\nfunction transfer(obj, transfers) {\r\n    transferCache.set(obj, transfers);\r\n    return obj;\r\n}\r\nfunction proxy(obj) {\r\n    return Object.assign(obj, { [proxyMarker]: true });\r\n}\r\nfunction windowEndpoint(w, context = self, targetOrigin = \"*\") {\r\n    return {\r\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\r\n        addEventListener: context.addEventListener.bind(context),\r\n        removeEventListener: context.removeEventListener.bind(context),\r\n    };\r\n}\r\nfunction toWireValue(value) {\r\n    for (const [name, handler] of transferHandlers) {\r\n        if (handler.canHandle(value)) {\r\n            const [serializedValue, transferables] = handler.serialize(value);\r\n            return [\r\n                {\r\n                    type: \"HANDLER\" /* HANDLER */,\r\n                    name,\r\n                    value: serializedValue,\r\n                },\r\n                transferables,\r\n            ];\r\n        }\r\n    }\r\n    return [\r\n        {\r\n            type: \"RAW\" /* RAW */,\r\n            value,\r\n        },\r\n        transferCache.get(value) || [],\r\n    ];\r\n}\r\nfunction fromWireValue(value) {\r\n    switch (value.type) {\r\n        case \"HANDLER\" /* HANDLER */:\r\n            return transferHandlers.get(value.name).deserialize(value.value);\r\n        case \"RAW\" /* RAW */:\r\n            return value.value;\r\n    }\r\n}\r\nfunction requestResponseMessage(ep, msg, transfers) {\r\n    return new Promise((resolve) => {\r\n        const id = generateUUID();\r\n        ep.addEventListener(\"message\", function l(ev) {\r\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\r\n                return;\r\n            }\r\n            ep.removeEventListener(\"message\", l);\r\n            resolve(ev.data);\r\n        });\r\n        if (ep.start) {\r\n            ep.start();\r\n        }\r\n        ep.postMessage(Object.assign({ id }, msg), transfers);\r\n    });\r\n}\r\nfunction generateUUID() {\r\n    return new Array(4)\r\n        .fill(0)\r\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\r\n        .join(\"-\");\r\n}\n\nexport { createEndpoint, expose, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","// ie., https://www.linkedin.com/in/annieheckenberger/\nconst STANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP =\n\t/(?:https?:)?(?:\\/\\/)?(?:[\\w]+\\.)?(?:linkedin\\.com)?\\/in\\/(?<publicIdentifier>[\\w_À&&-ÿ%-][^/?]+)\\/?/i;\n\n// Examples:\n// https://www.linkedin.com/sales/company/130757/insights?_ntb=fAcMJ6%2FtREiNqQyKnKT4Xg%3D%3D\n// https://www.linkedin.com/sales/people/ACwAAAAmVFgBoPQGSO_l_3cwHlpNdOiHdaW2pAQ,NAME_SEARCH,L7q4?_ntb=%C2%A6%15O%09%C3%92%C2%AAA%C2%B0%C2%AF%C3%90%20C%C3%BFk%1D%C2%9A\n// https://www.linkedin.com/sales/lead/ACwAAAAmVFgBoPQGSO_l_3cwHlpNdOiHdaW2pAQ,NAME_SEARCH,L7q4?_ntb=%C2%A6%15O%09%C3%92%C2%AAA%C2%B0%C2%AF%C3%90%20C%C3%BFk%1D%C2%9A\nconst PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP =\n\t/(?:https?:)?(?:\\/\\/)?(?:[\\w]+\\.)?(?:linkedin\\.com)?\\/sales\\/(people|lead)\\/(?<publicIdentifier>[\\w_À&-ÿ%-][^,?/]+)?/i;\n\n// ie., https://www.linkedin.com/company/saatchi-&-saatchi-wellness/\nconst STANDARD_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP =\n\t/(?:https?:)?(?:\\/\\/)?(?:[\\w]+\\.)?(?:linkedin\\.com)?\\/company\\/(?<publicIdentifier>[\\w_À&-ÿ%-][^/?]+)\\/?/i;\n\n// ie., /sales/company/610608?_ntb=fAcMJ6%2FtREiNqQyKnKT4Xg%3D%3D\nconst PREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP =\n\t/(?:https?:)?(?:\\/\\/)?(?:[\\w]+\\.)?(?:linkedin\\.com)?\\/sales\\/company\\/(?<publicIdentifier>[\\d][^/?]+)\\/?/i;\n\n// Examples:\n// https://www.linkedin.com/talent/profile/AEMAAAB_kGABaRsOMBn6bfW1iw_90slztzfmdys?project=400938220&lipi=urn%3Ali%3Apage%3Ad_talent_projectsHome%3B%2BMSr4USfTHyZnlrgcgRpVw%3D%3D\n// /talent/profile/AEMAAAB_kGABaRsOMBn6bfW1iw_90slztzfmdys?project=400938220&lipi=urn%3Ali%3Apage%3Ad_talent_projectsHome%3B%2BMSr4USfTHyZnlrgcgRpVw%3D%3D\n// https://www.linkedin.com/talent/hire/400938220/manage/all/profile/AEMAAAEzgEcBNTs49BJySGuQVAAZ2K9CECIwpT0?project=400938220\nconst RECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP =\n\t/(?:\\/profile)\\/(?<publicIdentifier>[\\w_À&-ÿ%-][^?/]+)\\/?/i;\n\n// urn:li:fs_salesCompany:76390\n// urn:li:member:159784268286\n// urn:li:fsd_entityResultViewModel:(urn:li:fsd_company:3776,SEARCH_SRP)\nconst GET_MEMBER_ID_FROM_URN_REG_EXP =\n\t/(?:\\w+:(\\(?))+(?::[\\w_]+(?:member|company):)?(?<memberId>[\\d]+)?/i;\n\n// Examples:\n// urn:li:fs_salesProfile:(ACwAAABXB8YBL-pY0m1uk-T5PnxhaGO1zKqmc8U,NAME_SEARCH,ecVP)\n// urn:li:fsd_entityResultViewModel:urn:li:fsd_profile:ACoAAA2xYEwBskLoVyr5rCQ4PWpslakEhwAtgXc // New Community search result entityUrn\n// urn:li:fsd_profileCard:(ACoAAAAD8nEBVA4J_Y8kdohsFvb49-Gritg17kQ,EXPERIENCE,en_US)\nconst SALES_NAV_ID_FROM_URN_REG_EXP =\n\t/(?:\\w+:)+fs(?:d)?_(?:sales|mini|profile)?(Profile|Card):(?:\\()?(?<salesNavId>[\\w_À&-ÿ%-][^,]+)?,?(?<type>.[^,]+)?/i;\n\n// ie., urn:li:ts_profile:AEMAAABRsqUB-vVYVqCYoLwKjsFNBZFF_I4IYdw\nconst RECRUITER_CONTACT_FROM_URN_REG_EXP =\n\t/(?:\\w+:)+(ts_profile|ts_linkedin_member_profile):\\(?(?<recruiterId>[\\w_À&-ÿ%-][^,?]+)?/i;\n\n// TODO: this is getting big, refactor...how to pull key matchers\n// from central location instead of appending here\nconst profileUrlIdModuleRegexMap = {\n\tpremiumCompanySearch: PREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumCompanyProfile: PREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumSavedAccounts: PREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumCompanyRecommendedLeads:\n\t\tPREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumCompanyAccountMapEntries:\n\t\tPREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumCompanyPeopleAlsoViewed:\n\t\tPREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\n\tpremiumSavedLeads: PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactSavedSearch: PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactSearch: PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactProfile: PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactRecommendations:\n\t\tPREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactRecommendedLeads:\n\t\tPREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactSimilarLeads: PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\n\tstandardCompanySearch: STANDARD_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardCompanyProfile: STANDARD_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardCompanyPeopleYouMayKnow:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardBlendedSearchCompany:\n\t\tSTANDARD_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\n\tstandardContactProfile: STANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardContactPeopleYouMayKnow:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardContactPeopleAlsoViewed:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardContactRecommendationsReceived:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardContactRecommendationsGiven:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardContactSearch: STANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardBlendedSearchContact:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\n\trecruiterContactProfile: RECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\trecruiterContactRecommendations:\n\t\tRECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\trecruiterContactSimilarProfiles:\n\t\tRECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\trecruiterContactSearch: RECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\trecruiterSavedContactSearch:\n\t\tRECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n};\n\nexport function getIdFromProfileUrl(profileUrl, module) {\n\tif (!profileUrl || !module) {\n\t\treturn null;\n\t}\n\n\tconst matchRegExp = profileUrlIdModuleRegexMap[module];\n\tconst publicIdentifierMatchObj = profileUrl.match(matchRegExp);\n\tconst profileId = publicIdentifierMatchObj?.groups?.publicIdentifier;\n\treturn profileId ? decodeURI(profileId) : null;\n}\n\nexport function getMemberIdFromUrn(urn) {\n\tconst memberIdMatchObj = urn.match(GET_MEMBER_ID_FROM_URN_REG_EXP);\n\treturn memberIdMatchObj?.groups?.memberId;\n}\n\nexport function getSalesNavIdFromUrn(urn) {\n\tconst salesNavIdMatchObj = urn.match(SALES_NAV_ID_FROM_URN_REG_EXP);\n\treturn salesNavIdMatchObj?.groups?.salesNavId;\n}\n\nexport function getRecruiterIdFromUrn(urn) {\n\tconst recruiterIdMatchObj = urn.match(RECRUITER_CONTACT_FROM_URN_REG_EXP);\n\treturn recruiterIdMatchObj?.groups?.recruiterId;\n}\n\n// parses the salesnav style urn now used in new li basic graphQL data to get the id and data type from it.\n// creating this as a separate function from getSalesNavIdFromUrn for now as we try to move towards a new\n// structure of processing the data.\nexport function parseElementUrn(urn) {\n\tconst elementUrnMatchObj = urn.match(SALES_NAV_ID_FROM_URN_REG_EXP);\n\tconst { salesNavId, type } = elementUrnMatchObj?.groups || {};\n\treturn {\n\t\tliSalesNavId: salesNavId || '',\n\t\telementType: type || '',\n\t};\n}\n","function ensureArray(val) {\n\tif (Array.isArray(val)) {\n\t\treturn val;\n\t}\n\n\tif (val == null) {\n\t\treturn [];\n\t}\n\n\treturn [val];\n}\n\nexport default ensureArray;\n","const cleanEmptyNullData = (data) => {\n\tif (!data) {\n\t\treturn {};\n\t}\n\n\tconst cleanedData = data;\n\tObject.entries(cleanedData).forEach(([k, v]) => {\n\t\tif (v && typeof v === 'object') {\n\t\t\tcleanEmptyNullData(v);\n\t\t}\n\n\t\tif (\n\t\t\t(v && typeof v === 'object' && !Object.keys(v).length) ||\n\t\t\tv === null ||\n\t\t\tv === undefined\n\t\t) {\n\t\t\tif (Array.isArray(cleanedData)) {\n\t\t\t\tcleanedData.splice(k, 1);\n\t\t\t} else {\n\t\t\t\tdelete cleanedData[k];\n\t\t\t}\n\t\t}\n\t});\n\n\treturn cleanedData;\n};\n\nconst cleanLocationString = (locationString) => {\n\treturn (\n\t\tlocationString\n\t\t\t// Replace line breaks\n\t\t\t.replace(/(\\r\\n|\\n|\\r)/gm, ' ')\n\t\t\t.replace(/^Greater /, '')\n\t\t\t.replace(/ Area$/, '')\n\t\t\t.replace(/ Metropolitan$/, '')\n\t);\n};\n\nconst cleanUrl = (url) => {\n\tlet newUrl = url && typeof url === 'string' && url.trim();\n\tif (!newUrl) {\n\t\t// return original data\n\t\treturn url;\n\t}\n\n\tif (/^https?:\\/([^/].*|\\/\\/+.+)$/i.test(newUrl)) {\n\t\tnewUrl = newUrl.replace(/:\\/+/, '://');\n\t}\n\n\treturn newUrl;\n};\n\nexport { cleanEmptyNullData, cleanLocationString, cleanUrl };\n","import { getMemberIdFromUrn } from 'workers/processExtractedData/utils/identifiers';\nimport ensureArray from '@seamless/core/src/utils/ensureArray';\nimport { cleanLocationString } from 'utils/data';\n\nconst formatContactPosition = (position) => {\n\tconst {\n\t\tcompany,\n\t\tcompanyName,\n\t\tcompanyUrn,\n\t\tcompanyUrnResolutionResult,\n\t\tcompanyResolutionResult,\n\t\tcurrent,\n\t\tdateRange,\n\t\tdescription,\n\t\t// Used for filtering out duplicates and not filtering out the rare type of same position\n\t\t// but one being \"contract\" to \"full-time\", ie. https://www.linkedin.com/in/alyssa-muscarello/\n\t\t'*employmentType': employmentType,\n\t\tendDateOn,\n\t\tendedOn,\n\t\tlocation,\n\t\tlocationName,\n\t\tstartDateOn,\n\t\tstartedOn,\n\t\ttitle,\n\t} = position;\n\n\tconst { industry, location: companyUrnLocation } =\n\t\tcompanyUrnResolutionResult || {};\n\n\tconst { industries: _industries } = companyResolutionResult || {};\n\n\tconst {\n\t\tstart: _dateRangeStart,\n\t\tstartDate: _dateRangeStartDate,\n\t\tend: _dateRangeEndDate,\n\t\tendDate: _dateRangeEnd,\n\t} = dateRange || {};\n\n\tconst _companyUrn =\n\t\t(company && typeof company === 'string' && company) || companyUrn;\n\n\tconst startDate =\n\t\t_dateRangeStart || _dateRangeStartDate || startDateOn || startedOn;\n\tconst endDate = _dateRangeEnd || _dateRangeEndDate || endDateOn || endedOn;\n\n\tlet _location = location?.displayName ?? location;\n\tif (!_location && companyUrnLocation) {\n\t\t_location = companyUrnLocation;\n\t}\n\n\tif (!_location && locationName) {\n\t\t_location = locationName;\n\t}\n\n\tlet industries;\n\tif (_industries) {\n\t\tindustries = ensureArray(_industries);\n\t} else if (industry) {\n\t\tindustries = ensureArray(industry);\n\t}\n\n\treturn {\n\t\tcompanyName: companyName?.trim(),\n\t\tcurrent,\n\t\tdescription,\n\t\temploymentType,\n\t\tendDate:\n\t\t\tendDate &&\n\t\t\ttypeof endDate === 'object' &&\n\t\t\tObject.keys(endDate).length\n\t\t\t\t? {\n\t\t\t\t\t\t...(endDate.month && { month: endDate.month }),\n\t\t\t\t\t\t...(endDate.year && { year: endDate.year }),\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\tfullString: _location && cleanLocationString(_location),\n\t\tindustries:\n\t\t\tindustries && Array.isArray(industries) && industries.length\n\t\t\t\t? industries\n\t\t\t\t: null,\n\t\tlinkedInCompanyId: _companyUrn && getMemberIdFromUrn(_companyUrn),\n\t\tstartDate:\n\t\t\tstartDate &&\n\t\t\ttypeof startDate === 'object' &&\n\t\t\tObject.keys(startDate).length\n\t\t\t\t? {\n\t\t\t\t\t\t...(startDate.month && { month: startDate.month }),\n\t\t\t\t\t\t...(startDate.year && { year: startDate.year }),\n\t\t\t\t  }\n\t\t\t\t: null,\n\t\ttitleName: title,\n\t};\n};\n\nconst formatOccupationSnippet = (snippetText) => {\n\tlet occupation;\n\n\tconst occupationParts = snippetText.match(\n\t\t/^current:\\s(.*)(\\s-\\s\\.\\.\\..*)?$/i\n\t);\n\tif (occupationParts?.length) {\n\t\t[, occupation] = occupationParts;\n\t}\n\n\treturn occupation;\n};\n\n/**\n * Parses an occupation string into company name and title\n * @param {String} occupation\n * @return {Object} { companyName, title }\n */\nconst parsePositionFromOccupationString = (occupation) => {\n\tconst occupationParts =\n\t\toccupation &&\n\t\t((occupation.indexOf(' at ') > -1 && occupation.split(' at ')) ||\n\t\t\t(occupation.indexOf(' @ ') > -1 && occupation.split(' @ ')) ||\n\t\t\t(occupation.indexOf(' - ') > -1 && occupation.split(' - ')));\n\n\tlet companyName;\n\tlet title;\n\n\tif (!occupationParts) {\n\t\ttitle = occupation;\n\t} else {\n\t\tcompanyName =\n\t\t\t!occupationParts?.length || occupationParts.length === 1\n\t\t\t\t? undefined\n\t\t\t\t: occupationParts.pop();\n\t\ttitle = !occupationParts?.length\n\t\t\t? undefined\n\t\t\t: occupationParts.join(' ');\n\t}\n\n\treturn { companyName, title };\n};\n\nconst getPositionsFromGroupedWorkExperience = (groupedWorkExperience) => {\n\tconst positions = groupedWorkExperience.reduce(\n\t\t(groupedPositionsArr, arrItem) => {\n\t\t\tlet positionsArr = groupedPositionsArr;\n\t\t\tconst groupPositions = arrItem.positions;\n\t\t\tpositionsArr = [...(positionsArr || []), ...(groupPositions || [])];\n\t\t\treturn positionsArr;\n\t\t},\n\t\t[]\n\t);\n\treturn positions;\n};\n\nexport {\n\tformatContactPosition,\n\tformatOccupationSnippet,\n\tparsePositionFromOccupationString,\n\tgetPositionsFromGroupedWorkExperience,\n};\n","// TODO: This was copied from `@seamless/core` and should be replaced with the version there\n// when that package has better code splitting support, b/c currently the build throws\n// errors when an imported method is used in a web worker.\n//\n// If this is to be imported anywhere other than a web worker, use the module from '@seamless/core'\n\n/**\n * Check if value is the language type of Object\n * @param {any} val - The value to test\n * @return {boolean} - True if the value is an Object, otherwise false.\n * example\n * isObject({}); // -> true\n * isObject([]); // -> true\n */\nconst isObject = (val) => {\n\tconst type = typeof val;\n\treturn !!val && (type === 'function' || type === 'object');\n};\n\nexport default isObject;\n","// TODO: This was copied from `@seamless/core` and should be replaced with the version there\n// when that package has better code splitting support, b/c currently the build throws\n// errors when an imported method is used in a web worker.\n//\n// If this is to be imported anywhere other than a web worker, use the module from '@seamless/core'\n\nimport isObject from './isObject';\n\n/**\n * Check if value is an empty object or array.\n * @param {any} val - The value to check\n * @return {boolean} - True if the value is empty\n * example\n * isEmpty([]); // -> true\n * isEmpty({}); // -> true\n */\nconst isEmpty = (val) => {\n\tif (val == null) {\n\t\treturn true;\n\t}\n\n\tif (Array.isArray(val)) {\n\t\treturn val.length === 0;\n\t}\n\n\treturn isObject(val) && Object.keys(val).length === 0;\n};\n\nexport default isEmpty;\n","import isEmpty from 'utils/coreDupes/isEmpty';\nimport isObject from 'utils/coreDupes/isObject';\n\n/**\n * Email Address\n */\n\n/**\n * Takes a number of email address response types from a LinkedIn response and returns just the email address\n * @param {Array.<Object>} emails - Several different objects with a nested email address\n * @param {string} primaryEmail - When sometimes an email address is passed down without other LinkedIn display data\n * @returns {string} The deduced email address\n */\nexport function formatEmailAddress(emails, primaryEmail) {\n\ttry {\n\t\tlet emailAddress;\n\n\t\tif (primaryEmail?.length) {\n\t\t\temailAddress = primaryEmail;\n\t\t} else if (emails && typeof emails === 'string' && emails.length) {\n\t\t\temailAddress = emails;\n\t\t} else if (emails?.emailAddress) {\n\t\t\temailAddress = emails.emailAddress;\n\t\t} else if (Array.isArray(emails) && emails.length) {\n\t\t\temailAddress = emails[0].emailAddress;\n\t\t}\n\n\t\treturn emailAddress;\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n\n/**\n * Location\n */\n\nexport const cleanLocationString = (locationString) => {\n\treturn (\n\t\tlocationString\n\t\t\t// Replace line breaks\n\t\t\t.replace(/(\\r\\n|\\n|\\r)/gm, ' ')\n\t\t\t.replace(/^Greater /, '')\n\t\t\t.replace(/ Area$/, '')\n\t\t\t.replace(/ Metropolitan$/, '')\n\t);\n};\n\nconst LOCATION_OBJECT_KEYS = [\n\t'line1',\n\t'line2',\n\t'city',\n\t'geographicArea',\n\t'postalCode',\n\t'country',\n];\nfunction hasValidLocationKeys(location) {\n\treturn (\n\t\tisObject(location) &&\n\t\t!isEmpty(location) &&\n\t\tObject.keys(location).some((k) => LOCATION_OBJECT_KEYS.includes(k))\n\t);\n}\n\nexport function formatCompanyLocationObject(location) {\n\ttry {\n\t\tlet street1;\n\t\tlet street2;\n\t\tlet city;\n\t\tlet state;\n\t\tlet postCode;\n\t\tlet country;\n\n\t\tif (location && hasValidLocationKeys(location)) {\n\t\t\t({\n\t\t\t\tline1: street1,\n\t\t\t\tline2: street2,\n\t\t\t\tcity,\n\t\t\t\tgeographicArea: state,\n\t\t\t\tpostalCode: postCode,\n\t\t\t\tcountry,\n\t\t\t} = location);\n\t\t}\n\n\t\treturn {\n\t\t\tstreet1,\n\t\t\tstreet2,\n\t\t\tcity,\n\t\t\tstate,\n\t\t\tpostCode,\n\t\t\tcountry,\n\t\t};\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n\nexport function getCompanyLocationStringFromObject(locationObject) {\n\ttry {\n\t\tlet fullString;\n\t\tif (!isEmpty(locationObject)) {\n\t\t\tconst {\n\t\t\t\tstreet1,\n\t\t\t\tstreet2 = '',\n\t\t\t\tcity,\n\t\t\t\tstate,\n\t\t\t\tpostCode,\n\t\t\t\tcountry,\n\t\t\t} = locationObject;\n\t\t\tfullString = [street1, street2, city, state, postCode, country]\n\t\t\t\t.map((s) => s && s.trim())\n\t\t\t\t.filter((s) => !!s)\n\t\t\t\t.join(' ');\n\t\t}\n\n\t\tif (typeof fullString === 'string' && !fullString.length) {\n\t\t\tfullString = undefined;\n\t\t}\n\n\t\treturn fullString;\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n\n/**\n * Social\n */\n\nexport function formatContactSocial({\n\twebsites = [],\n\tsocialHandles = [],\n\ttwitterHandles = [],\n}) {\n\ttry {\n\t\tlet social = [];\n\n\t\tif (websites?.length) {\n\t\t\tconst contactWebsites = websites\n\t\t\t\t.map(\n\t\t\t\t\t(w) =>\n\t\t\t\t\t\tw && {\n\t\t\t\t\t\t\ttype: w.type?.category\n\t\t\t\t\t\t\t\t? w.type.category\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\turl: w.url,\n\t\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\t.filter((w) => !!w);\n\t\t\tif (contactWebsites?.length) {\n\t\t\t\tcontactWebsites.forEach((website) => social.push(website));\n\t\t\t}\n\t\t}\n\n\t\tif (socialHandles?.length) {\n\t\t\tconst contactSocialHandles = socialHandles.map(\n\t\t\t\t(t) =>\n\t\t\t\t\tt?.type?.length &&\n\t\t\t\t\tt.type.toLowerCase() === 'twitter' && {\n\t\t\t\t\t\ttype: 'social',\n\t\t\t\t\t\tsocialType: 'twitter',\n\t\t\t\t\t\turl: `http://twitter.com/${t.name}`,\n\t\t\t\t\t}\n\t\t\t);\n\n\t\t\tif (contactSocialHandles?.length) {\n\t\t\t\tsocial.push(contactSocialHandles);\n\t\t\t}\n\t\t}\n\n\t\tif (twitterHandles?.length) {\n\t\t\tconst contactTwitterHandles = twitterHandles.map(\n\t\t\t\t(t) =>\n\t\t\t\t\tt?.name && {\n\t\t\t\t\t\ttype: 'social',\n\t\t\t\t\t\tsocialType: 'twitter',\n\t\t\t\t\t\turl: t.name.includes('http')\n\t\t\t\t\t\t\t? t.name\n\t\t\t\t\t\t\t: `http://twitter.com/${t.name}`,\n\t\t\t\t\t}\n\t\t\t);\n\t\t\tif (contactTwitterHandles?.length) {\n\t\t\t\tsocial.push(contactTwitterHandles);\n\t\t\t}\n\t\t}\n\n\t\t// if (picture && picture.length) {\n\t\t// \tsocial.push({\n\t\t// \t\ttype: 'image',\n\t\t// \t\turl: picture,\n\t\t// \t\tsocialType: 'LinkedIn',\n\t\t// \t});\n\t\t// }\n\n\t\tif (social?.length) {\n\t\t\tsocial = social.filter((s) => s && s.url);\n\t\t}\n\n\t\treturn social;\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n","import { cleanUrl } from 'utils/data';\n\nconst formatProfilePicture = (profilePicture) => {\n\ttry {\n\t\tlet picture = profilePicture;\n\n\t\tif (picture && typeof picture === 'object') {\n\t\t\tconst { artifacts, rootUrl } = picture;\n\t\t\tif (\n\t\t\t\trootUrl?.length &&\n\t\t\t\trootUrl.includes('http') &&\n\t\t\t\tartifacts &&\n\t\t\t\tArray.isArray(artifacts)\n\t\t\t) {\n\t\t\t\tpicture =\n\t\t\t\t\trootUrl +\n\t\t\t\t\tartifacts[artifacts.length - 1]\n\t\t\t\t\t\t.fileIdentifyingUrlPathSegment;\n\t\t\t} else if (\n\t\t\t\t(!rootUrl || !rootUrl.length) &&\n\t\t\t\tartifacts?.length &&\n\t\t\t\tartifacts[artifacts.length - 1].fileIdentifyingUrlPathSegment &&\n\t\t\t\tartifacts[\n\t\t\t\t\tartifacts.length - 1\n\t\t\t\t].fileIdentifyingUrlPathSegment.includes('http')\n\t\t\t) {\n\t\t\t\tpicture =\n\t\t\t\t\tartifacts[artifacts.length - 1]\n\t\t\t\t\t\t.fileIdentifyingUrlPathSegment;\n\t\t\t}\n\n\t\t\tif (!picture || !picture.length) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\tpicture = picture && cleanUrl(picture);\n\t\treturn picture;\n\t} catch (err) {\n\t\treturn undefined;\n\t}\n};\n\nexport default formatProfilePicture;\n","const formatContactIndustries = (industries = []) => {\n\ttry {\n\t\tlet formattedIndustries = industries;\n\t\tif (\n\t\t\tformattedIndustries &&\n\t\t\ttypeof formattedIndustries === 'object' &&\n\t\t\t!Array.isArray(formattedIndustries)\n\t\t) {\n\t\t\tformattedIndustries = Object.values(formattedIndustries);\n\t\t}\n\n\t\tformattedIndustries = formattedIndustries.reduce((arr, ind) => {\n\t\t\tconst industry = (\n\t\t\t\t(typeof ind === 'string' && ind) ||\n\t\t\t\tind.name ||\n\t\t\t\t''\n\t\t\t).trim();\n\t\t\tif (industry) {\n\t\t\t\tarr.push(industry);\n\t\t\t}\n\t\t\treturn arr;\n\t\t}, []);\n\t\treturn formattedIndustries.length ? formattedIndustries : null;\n\t} catch (err) {\n\t\treturn null;\n\t}\n};\n\nexport default formatContactIndustries;\n","import ensureArray from '@seamless/core/src/utils/ensureArray';\n\nexport function formatContactEducations(educations) {\n\ttry {\n\t\treturn educations\n\t\t\t.filter((education) => education)\n\t\t\t.map((education) => {\n\t\t\t\tconst {\n\t\t\t\t\tschoolName: name,\n\t\t\t\t\tdegree,\n\t\t\t\t\tdegreeName,\n\t\t\t\t\tactivities = [],\n\t\t\t\t\tfieldOfStudy,\n\t\t\t\t\tdateRange: {\n\t\t\t\t\t\tstart: { year: dateRangeStartYear } = {},\n\t\t\t\t\t\tend: { year: dateRangeEndYear } = {},\n\t\t\t\t\t} = {},\n\t\t\t\t\tstartedOn: { year: startedOnYear } = {},\n\t\t\t\t\tendedOn: { year: endedOnYear } = {},\n\t\t\t\t\tendDateOn: { year: endDateOnYear } = {},\n\t\t\t\t\tstartDateOn: { year: startDateOnYear } = {},\n\n\t\t\t\t\t// Legacy Recruiter\n\t\t\t\t\tstartDateYear,\n\t\t\t\t\tendDateYear,\n\t\t\t\t} = education;\n\n\t\t\t\tconst startYear =\n\t\t\t\t\tdateRangeStartYear ||\n\t\t\t\t\tstartedOnYear ||\n\t\t\t\t\tstartDateOnYear ||\n\t\t\t\t\tstartDateYear;\n\t\t\t\tconst endYear =\n\t\t\t\t\tdateRangeEndYear ||\n\t\t\t\t\tendedOnYear ||\n\t\t\t\t\tendDateOnYear ||\n\t\t\t\t\tendDateYear;\n\n\t\t\t\tlet { fieldsOfStudy } = education;\n\t\t\t\tif (Array.isArray(fieldsOfStudy) && fieldsOfStudy.length) {\n\t\t\t\t\tfieldsOfStudy = fieldsOfStudy.join();\n\t\t\t\t}\n\n\t\t\t\tconst educationFieldOfStudy =\n\t\t\t\t\ttypeof fieldsOfStudy === 'string'\n\t\t\t\t\t\t? fieldsOfStudy\n\t\t\t\t\t\t: fieldOfStudy;\n\n\t\t\t\tconst formattedEducation = {\n\t\t\t\t\tcompanyName: name,\n\t\t\t\t\tdegreeName: degreeName || degree,\n\t\t\t\t\tactivities: activities && ensureArray(activities),\n\t\t\t\t\tfieldOfStudy: educationFieldOfStudy,\n\t\t\t\t\t...(startYear && { startDate: { year: startYear } }),\n\t\t\t\t\t...(endYear && { endDate: { year: endYear } }),\n\t\t\t\t};\n\n\t\t\t\treturn formattedEducation;\n\t\t\t});\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n\nexport function formatContactSkills(skills = []) {\n\ttry {\n\t\tconst contactSkills = skills.reduce((skillsArr, skill) => {\n\t\t\tconst _skills = skillsArr;\n\t\t\tif (skill.name) {\n\t\t\t\t_skills.push(skill.name);\n\t\t\t}\n\t\t\treturn _skills;\n\t\t}, []);\n\t\treturn contactSkills;\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n\nexport function formatContactLanguages(languages = []) {\n\ttry {\n\t\tconst contactLanguages = languages.reduce((languagesArr, language) => {\n\t\t\tconst _languages = languagesArr;\n\t\t\tif (language.name) {\n\t\t\t\t_languages.push(language.name);\n\t\t\t}\n\t\t\treturn _languages;\n\t\t}, []);\n\t\treturn contactLanguages;\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n","export default function getCurrentPositions(positions) {\n\treturn positions.filter((p) => {\n\t\treturn (!p.endDate && p.startDate) || p.current;\n\t});\n}\n","import isEmpty from 'utils/coreDupes/isEmpty';\n\nconst hasResults = (data) => Array.isArray(data) && !isEmpty(data);\n\nexport default hasResults;\n","const isValidString = (possibleString) =>\n\tBoolean(typeof possibleString === 'string' && possibleString.length);\n\nexport default isValidString;\n","import { formatEmailAddress } from 'workers/processExtractedData/utils/contactInfo';\nimport formatProfilePicture from 'workers/processExtractedData/utils/formatProfilePicture';\nimport formatContactIndustries from 'workers/processExtractedData/utils/industries';\nimport {\n\tformatContactEducations,\n\tformatContactLanguages,\n\tformatContactSkills,\n} from 'workers/processExtractedData/utils/experience';\nimport {\n\tformatContactPosition,\n\tparsePositionFromOccupationString,\n} from 'workers/processExtractedData/utils/occupation';\nimport { cleanEmptyNullData, cleanLocationString, cleanUrl } from 'utils/data';\nimport getCurrentPositions from 'utils/getCurrentPositions';\nimport hasResults from 'utils/hasResults';\nimport isValidString from 'utils/isValidString';\nimport uniqueBy from 'utils/collection';\n\n// TODO: move these to a config file\nconst STANDARD_CONTACT_PROFILE_URL_BASE = 'https://www.linkedin.com/in/';\nconst PREMIUM_CONTACT_PROFILE_URL_BASE = 'https://www.linkedin.com/sales/lead/';\nconst RECRUITER_CONTACT_PROFILE_URL_BASE =\n\t'https://www.linkedin.com/talent/search/profile/';\n\nfunction setCompanyNameAndTitle(profile) {\n\tconst _profile = profile;\n\n\tlet companyName;\n\tlet title;\n\tif (hasResults(_profile.positions)) {\n\t\tconst currentPositions = getCurrentPositions(_profile.positions);\n\t\tif (hasResults(currentPositions)) {\n\t\t\t_profile.companyName = currentPositions[0].companyName;\n\t\t\t_profile.title = currentPositions[0].titleName;\n\t\t}\n\t}\n\n\tif ((!_profile.companyName || !_profile.title) && _profile.occupation) {\n\t\t({ companyName, title } = parsePositionFromOccupationString(\n\t\t\t_profile.occupation\n\t\t));\n\t\tif (companyName) {\n\t\t\t_profile.companyName = companyName;\n\t\t}\n\n\t\tif (title) {\n\t\t\t_profile.title = title;\n\t\t}\n\t}\n\n\tif (hasResults(_profile.positions)) {\n\t\tconst currentPositions = getCurrentPositions(_profile.positions);\n\t\tif (\n\t\t\thasResults(currentPositions) &&\n\t\t\t(_profile.companyName !== currentPositions[0].companyName ||\n\t\t\t\t_profile.title !== currentPositions[0].titleName)\n\t\t) {\n\t\t\t_profile.companyName = currentPositions[0].companyName;\n\t\t\t_profile.title = currentPositions[0].titleName;\n\t\t}\n\t}\n\n\treturn _profile;\n}\n\n/**\n * Format the data from a parsed contact object into a Seamless.AI contact object\n * @param {Object} data - Object of parsed contact data\n * @return {Object} Seamless.AI expected contact object format\n */\nconst createSeamlessContact = (data) => {\n\tconst {\n\t\t// LinkedIn Identifiers\n\t\tliMemberId,\n\t\tpublicIdentifier,\n\t\tsalesNavIdentifier,\n\t\trecruiterIdentifier,\n\n\t\t// LinkedIn Profile URLs\n\t\tflagshipProfileUrl,\n\n\t\t// Entity info\n\t\tfirstName,\n\t\tlastName,\n\t\tfullName,\n\t\tbirthDateOn,\n\t\tprofilePicture,\n\t\tsummary,\n\n\t\t// Contact info\n\t\temails,\n\t\tphoneNumbers,\n\t\tprimaryEmail,\n\t\tlocation,\n\t\tsocial,\n\n\t\t// Personal info\n\t\tawards,\n\t\tcertifications,\n\t\tcourses,\n\t\teducations,\n\t\tindustries,\n\t\tlanguages,\n\t\torganizations,\n\t\tpatents,\n\t\tprojects,\n\t\tpublications,\n\t\tskills,\n\t\tvolunteeringExperiences,\n\n\t\t// JobInfo\n\t\toccupation,\n\t\tpositions,\n\t} = data;\n\n\tlet contactName = fullName;\n\tif (!contactName?.length && firstName && lastName) {\n\t\tcontactName = `${firstName} ${lastName}`;\n\t}\n\tconst liProfileUrl =\n\t\tflagshipProfileUrl ||\n\t\t(publicIdentifier &&\n\t\t\t`${STANDARD_CONTACT_PROFILE_URL_BASE}${publicIdentifier}`);\n\tconst liSalesNavUrl =\n\t\tsalesNavIdentifier &&\n\t\t`${PREMIUM_CONTACT_PROFILE_URL_BASE}${salesNavIdentifier}`;\n\tconst liRecruiterUrl =\n\t\trecruiterIdentifier &&\n\t\t`${RECRUITER_CONTACT_PROFILE_URL_BASE}${recruiterIdentifier}`;\n\n\tlet _positions = hasResults(positions)\n\t\t? positions.map(\n\t\t\t\t(position) =>\n\t\t\t\t\ttypeof position === 'object' &&\n\t\t\t\t\tObject.keys(position).length &&\n\t\t\t\t\tformatContactPosition(position)\n\t\t  )\n\t\t: null;\n\n\tif (hasResults(_positions)) {\n\t\t// remove empty\n\t\t_positions = _positions.filter(\n\t\t\t(pos) => !!pos?.companyName && !!pos?.titleName\n\t\t);\n\t\t_positions = uniqueBy(_positions, [\n\t\t\t'companyName',\n\t\t\t'titleName',\n\t\t\t'employmentType',\n\t\t]);\n\t}\n\n\tlet companyName;\n\tlet title;\n\n\tif (occupation) {\n\t\t({ companyName, title } =\n\t\t\tparsePositionFromOccupationString(occupation));\n\t}\n\n\tif (!companyName && positions?.length) {\n\t\tconst latestPosition = positions[0]; // the latest position may not always be the first one. if not, use startDate\n\t\tcompanyName = latestPosition.companyName;\n\t}\n\n\tlet person = {\n\t\t// LinkedIn Identifiers\n\t\tliMemberId,\n\t\tliPublicIdentifier: publicIdentifier && decodeURI(publicIdentifier),\n\t\tliSalesNavId: salesNavIdentifier,\n\t\tliRecruiterId: recruiterIdentifier,\n\n\t\t// LinkedIn Profile URLs\n\t\tliProfileUrl: isValidString(liProfileUrl)\n\t\t\t? cleanUrl(liProfileUrl)\n\t\t\t: null,\n\t\tliSalesNavUrl: isValidString(liSalesNavUrl)\n\t\t\t? cleanUrl(liSalesNavUrl)\n\t\t\t: null,\n\t\tliRecruiterUrl: isValidString(liRecruiterUrl)\n\t\t\t? cleanUrl(liRecruiterUrl)\n\t\t\t: null,\n\n\t\t// Entity Info\n\t\tfirstName,\n\t\tlastName,\n\t\tcontactName,\n\t\tbirthday: birthDateOn,\n\t\tliImageUrl: profilePicture && formatProfilePicture(profilePicture),\n\n\t\t// Contact info\n\t\tcontactEmail: formatEmailAddress(emails, primaryEmail),\n\t\tphoneNumbers,\n\t\tlocationFullString: isValidString(location)\n\t\t\t? cleanLocationString(location)\n\t\t\t: null,\n\t\tsocial,\n\n\t\t// Personal info\n\t\t...(summary && { meta: { summary } }),\n\t\tawards: hasResults(awards) ? awards : null,\n\t\tcertifications: hasResults(certifications) ? certifications : null,\n\t\tcourses: hasResults(courses) ? courses : null,\n\t\teducations: hasResults(educations)\n\t\t\t? formatContactEducations(educations)\n\t\t\t: null,\n\t\tindustries: formatContactIndustries(industries),\n\t\tlanguages: hasResults(languages)\n\t\t\t? formatContactLanguages(languages)\n\t\t\t: null,\n\t\torganizations: hasResults(organizations) ? organizations : null,\n\t\tpatents: hasResults(patents)\n\t\t\t? patents.filter((patent) => !!patent)\n\t\t\t: null,\n\t\tprojects: hasResults(projects)\n\t\t\t? projects.filter((project) => !!project)\n\t\t\t: null,\n\t\tpublications: hasResults(publications)\n\t\t\t? publications.filter((publication) => !!publication)\n\t\t\t: null,\n\t\tskills: hasResults(skills) ? formatContactSkills(skills) : null,\n\t\tvolunteeringExperiences: hasResults(volunteeringExperiences)\n\t\t\t? volunteeringExperiences\n\t\t\t: null,\n\n\t\t// Job info\n\t\tcompanyName,\n\t\ttitle,\n\t\t// company: {\n\t\t// \tname: companyName,\n\t\t// \ttitle,\n\t\t// },\n\t\toccupation,\n\t\tpositions: _positions,\n\t\titemType: 'contact',\n\t};\n\n\tperson = setCompanyNameAndTitle(person);\n\tperson = cleanEmptyNullData(person);\n\treturn person;\n};\n\nexport default createSeamlessContact;\n","// Vanilla JS equivalent to Lodash _uniqBy\nconst uniqueBy = (arr, keys) => {\n\tconst obj = arr.reduce((ac, a) => {\n\t\tconst keyString = keys.map((k) => a[k]).join('-');\n\t\tconst current = ac;\n\t\tcurrent[keyString] = a;\n\t\treturn current;\n\t}, {});\n\n\treturn Object.values(obj);\n};\n\nexport default uniqueBy;\n","const VALID_CONTACT_PRIMARY_PROPERTIES = ['firstName', 'contactName'];\nconst VALID_CONTACT_SECONDARY_PROPERTIES = [\n\t'liRecruiterId',\n\t'liSalesNavId',\n\t'liPublicIdentifier',\n];\n\nconst isValidContact = (contact) => {\n\treturn (\n\t\tVALID_CONTACT_PRIMARY_PROPERTIES.some((prop) =>\n\t\t\tObject.prototype.hasOwnProperty.call(contact, prop)\n\t\t) &&\n\t\tVALID_CONTACT_SECONDARY_PROPERTIES.some((prop) =>\n\t\t\tObject.prototype.hasOwnProperty.call(contact, prop)\n\t\t) &&\n\t\tVALID_CONTACT_PRIMARY_PROPERTIES.every(\n\t\t\t(prop) => !contact[prop]?.toLowerCase().includes('linkedin member')\n\t\t)\n\t);\n};\n\nexport default isValidContact;\n","import { formatOccupationSnippet } from 'workers/processExtractedData/utils/occupation';\nimport {\n\tgetMemberIdFromUrn,\n\tgetSalesNavIdFromUrn,\n} from 'workers/processExtractedData/utils/identifiers';\nimport createSeamlessContact from 'workers/processExtractedData/utils/createSeamlessContact';\nimport isValidContact from 'utils/isValidContact';\n\nconst parseStandardCompanyPeopleYouMayKnow = ({ data, uiData = {} }) => {\n\tconst {\n\t\tentityUrn,\n\t\tobjectUrn,\n\t\ttrackingUrn,\n\t\tpublicIdentifier,\n\t\tfirstName,\n\t\tlastName,\n\t\tpicture: profilePictureMiniProfile,\n\t\tprofilePicture: profilePictureNormalizedProfile,\n\t\tlocation: locationNormalizedProfile,\n\t\toccupation: occupationMiniProfile,\n\t\theadline: occupationNormalizedProfile,\n\t} = data;\n\n\tlet liMemberId = trackingUrn && getMemberIdFromUrn(trackingUrn);\n\tif (!liMemberId && objectUrn) {\n\t\tliMemberId = getMemberIdFromUrn(objectUrn);\n\t}\n\n\tlet occupationFromCurrentSnippet;\n\tlet locationMiniProfile;\n\tif (uiData) {\n\t\tconst matchingUiData = uiData.elements?.find(\n\t\t\t(elements) => elements.type === 'SEARCH_HITS' && elements.elements\n\t\t);\n\t\tconst matchingUiDataItem = matchingUiData?.elements.find(\n\t\t\t(item) => item.publicIdentifier === publicIdentifier\n\t\t);\n\n\t\tif (matchingUiDataItem) {\n\t\t\tlocationMiniProfile = matchingUiDataItem.subline?.text;\n\t\t\tif (matchingUiDataItem.snippetText?.text?.startsWith('Current:')) {\n\t\t\t\toccupationFromCurrentSnippet = formatOccupationSnippet(\n\t\t\t\t\tmatchingUiDataItem.snippetText.text\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst contactOpts = {\n\t\tliMemberId,\n\t\tpublicIdentifier,\n\t\tsalesNavIdentifier: getSalesNavIdFromUrn(entityUrn),\n\t\tfirstName,\n\t\tlastName,\n\t\tprofilePicture:\n\t\t\tprofilePictureMiniProfile || profilePictureNormalizedProfile,\n\t\tlocation:\n\t\t\tlocationMiniProfile ||\n\t\t\tlocationNormalizedProfile?.locationDisplayName,\n\t\toccupation:\n\t\t\toccupationFromCurrentSnippet ||\n\t\t\toccupationMiniProfile ||\n\t\t\toccupationNormalizedProfile,\n\t};\n\n\tconst parsedContact = createSeamlessContact(contactOpts);\n\tparsedContact.pageSectionSourced = 'standardCompanyPeopleYouMayKnow';\n\tparsedContact.itemType = 'contact';\n\treturn isValidContact(parsedContact) ? parsedContact : null;\n};\n\nexport default parseStandardCompanyPeopleYouMayKnow;\n","import { getMax } from 'utils/number';\n\nconst REVENUE_RANGES = {\n\t'$0-$100K': [0, 100000],\n\t'$100K-$1M': [100001, 1000000],\n\t'$1M-$5M': [1000001, 5000000],\n\t'$5M-$20M': [5000001, 20000000],\n\t'$20M-$50M': [20000001, 50000000],\n\t'$50M-$100M': [50000001, 100000000],\n\t'$100M-$500M': [100000001, 500000000],\n\t'$500M-$1B': [500000001, 1000000000],\n\t'$1B+': [1000000001, 200000000000000],\n};\n\n/**\n * Function that takes an annual revenue and produces a string range\n * @param {string} - annualRevenue\n * @returns {string} - The annual revenue converted to a set range\n */\nexport function formatRevenueRange(annualRevenue) {\n\tconst val = parseInt(annualRevenue, 10);\n\treturn Object.keys(REVENUE_RANGES).filter((k) => {\n\t\tconst range = REVENUE_RANGES[k];\n\t\treturn val >= range[0] && val <= range[1];\n\t})[0];\n}\n\nexport function formatStaffCountRange(staffRange) {\n\tlet _staffRange = staffRange;\n\tif (_staffRange === 'myself only') {\n\t\t_staffRange = '0 - 1';\n\t} else if (_staffRange?.start != null) {\n\t\tif (_staffRange.end) {\n\t\t\t_staffRange = `${_staffRange.start} - ${_staffRange.end}`;\n\t\t} else {\n\t\t\t_staffRange = `${_staffRange.start}`;\n\t\t}\n\t}\n\n\treturn _staffRange;\n}\n\n/**\n *\n * @param count\n * @param range\n * @returns {string}\n */\nexport function getNormalizedEmployeeCount({ count, range }) {\n\tlet _count = count;\n\tif (!_count && (!range || (typeof range === 'string' && !range.length))) {\n\t\t// in case one is zero return that\n\t\treturn typeof _count !== 'undefined' ? _count : null;\n\t}\n\n\t_count = ~~(\n\t\t(typeof _count === 'string' &&\n\t\t\t_count.length &&\n\t\t\t~~_count.replace(/\\D/g, '')) ||\n\t\t_count\n\t);\n\tif (!range || (typeof range === 'string' && !range.length)) {\n\t\treturn _count;\n\t}\n\n\t// can have either a `-` or `to` as the range separator\n\tlet rangeLower;\n\tif (range === 'Less than 25') {\n\t\trangeLower = 1;\n\t} else {\n\t\trangeLower =\n\t\t\t(range && range.start) ||\n\t\t\t(typeof range === 'string' &&\n\t\t\t\trange.length &&\n\t\t\t\trange\n\t\t\t\t\t.replace(/\\s/g, '')\n\t\t\t\t\t.split('-')[0]\n\t\t\t\t\t.split('to')[0]\n\t\t\t\t\t.replace(/\\D/g, ''));\n\t}\n\n\treturn getMax([~~rangeLower || 1, _count]);\n}\n","import formatProfilePicture from 'workers/processExtractedData/utils/formatProfilePicture';\nimport {\n\tformatRevenueRange,\n\tformatStaffCountRange,\n\tgetNormalizedEmployeeCount,\n} from 'workers/processExtractedData/utils/organization';\nimport {\n\tformatCompanyLocationObject,\n\tgetCompanyLocationStringFromObject,\n} from 'workers/processExtractedData/utils/contactInfo';\nimport { cleanEmptyNullData } from 'utils/data';\nimport hasResults from 'utils/hasResults';\nimport isEmpty from 'utils/coreDupes/isEmpty';\nimport isObject from 'utils/coreDupes/isObject';\n\nconst STANDARD_COMPANY_PROFILE_URL_BASE = 'https://www.linkedin.com/company/';\nconst PREMIUM_COMPANY_PROFILE_URL = (linkedInId) =>\n\t`https://www.linkedin.com/sales/accounts/insights?companyId=${linkedInId}&trk=li_comp_page`;\n\nconst INVALID_WEBSITES = ['linkedin.com', 'licdn.com'];\nfunction isValidCompanyWebsite(website) {\n\treturn (\n\t\twebsite &&\n\t\tINVALID_WEBSITES.every((invalidUrl) => !website.includes(invalidUrl))\n\t);\n}\n\nconst createSeamlessCompany = (data) => {\n\tconst {\n\t\t// LinkedIn Identifiers\n\t\tlinkedInId,\n\t\tlinkedInProfileIdentifier,\n\t\tlinkedInUrn,\n\n\t\t// LinkedIn Profile URLs\n\t\tlinkedInProfileUrl, // Currently NOT part of the Seamless API company model\n\t\tlinkedInSalesNavUrl,\n\n\t\t// Entity info\n\t\tname,\n\t\tlogo,\n\t\tdescription,\n\n\t\t// Company info\n\t\tannualRevenue,\n\t\tfoundedOn,\n\t\tindustries,\n\t\tspecialities,\n\t\tstaffCount,\n\t\tstaffCountRange: staffRange,\n\t\ttype,\n\n\t\t// Company contact info\n\t\tcompanyPageUrl,\n\t\tcompanyUrl,\n\t\twebsite,\n\t\tconfirmedLocations,\n\t\theadquarter,\n\t\theadquarters,\n\t\tlocationFullString,\n\n\t\t// Social\n\t\tlinkedInFollowerCount,\n\n\t\t// Relations\n\t\taffiliatedCompanies,\n\t} = data;\n\n\tconst addresses = locationFullString ? [locationFullString] : [];\n\n\tlet location = locationFullString;\n\tif (isObject(headquarter) || isObject(headquarters)) {\n\t\tconst _headquarter = formatCompanyLocationObject(\n\t\t\theadquarter || headquarters\n\t\t);\n\t\tif (!isEmpty(_headquarter)) {\n\t\t\taddresses.push(_headquarter);\n\t\t\tif (!location) {\n\t\t\t\tlocation = getCompanyLocationStringFromObject(_headquarter);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (hasResults(confirmedLocations)) {\n\t\tfor (const confirmedLocation of confirmedLocations) {\n\t\t\tconst formattedLocation =\n\t\t\t\tformatCompanyLocationObject(confirmedLocation);\n\t\t\tif (formattedLocation) {\n\t\t\t\taddresses.push(formattedLocation);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst staffCountRange = staffRange && formatStaffCountRange(staffRange);\n\tconst employeeCountNmlzd =\n\t\t(staffCount || staffCountRange) &&\n\t\tgetNormalizedEmployeeCount({\n\t\t\tcount: staffCount,\n\t\t\trange: staffCountRange,\n\t\t});\n\n\tconst parsedAnnualRevenue =\n\t\tannualRevenue && Number.parseFloat(annualRevenue).toFixed(0);\n\n\tconst companyWebsite = website || companyPageUrl || companyUrl;\n\n\tlet company = {\n\t\tlinkedInId,\n\t\tlinkedInProfileIdentifier,\n\t\tlinkedInUrn,\n\t\tlinkedInProfileUrl:\n\t\t\tlinkedInProfileUrl ||\n\t\t\t(linkedInProfileIdentifier &&\n\t\t\t\t`${STANDARD_COMPANY_PROFILE_URL_BASE}${linkedInProfileIdentifier}`),\n\t\tlinkedInSalesNavUrl:\n\t\t\tlinkedInSalesNavUrl ||\n\t\t\t(linkedInId && PREMIUM_COMPANY_PROFILE_URL(linkedInId)),\n\t\tname,\n\t\tdescription,\n\t\tcompanyLogoUrl: logo && formatProfilePicture(logo),\n\t\tannualRevenue: parsedAnnualRevenue,\n\t\trevenueRevenue:\n\t\t\tparsedAnnualRevenue && formatRevenueRange(parsedAnnualRevenue),\n\t\tfoundedOn,\n\t\tindustries,\n\t\tspecialities,\n\t\tstaffCount,\n\t\tstaffCountRange,\n\t\temployeeCountNmlzd,\n\t\ttype,\n\t\taddresses: hasResults(addresses) ? addresses : null,\n\t\tlocation,\n\t\twebsite: isValidCompanyWebsite(companyWebsite) ? companyWebsite : null,\n\t\tlinkedInFollowerCount: linkedInFollowerCount && ~~linkedInFollowerCount,\n\t\taffiliatedCompanies,\n\t\titemType: 'company',\n\t};\n\n\tcompany = cleanEmptyNullData(company);\n\treturn company;\n};\n\nexport default createSeamlessCompany;\n","/**\n * Get a random number between the given min/max. Defaults: min=0, max=1.\n * @param {number?} min Minimum value returned. Default 0\n * @param {number?} max Maximum value returned. Default 1 if min is 0. Optionally calculated as min * 1.5\n * @returns {number}\n */\nconst getRandomNumber = (min = 0, max = (min || 2 / 3) * 1.5) => {\n\treturn Math.round(\n\t\tMath.max(\n\t\t\tMath.min(\n\t\t\t\tmin + Math.random() * min,\n\t\t\t\tmin + Math.random() * min - min * 0.4\n\t\t\t),\n\t\t\tmin + Math.random() * (max - min)\n\t\t)\n\t);\n};\n\nconst getMax = (numbers) => {\n\treturn numbers && numbers.length && Math.max(...numbers);\n};\n\nexport { getMax, getRandomNumber };\n","const VALID_COMPANY_PROPERTIES = ['name', 'linkedInId', 'linkedInUrn'];\nconst isValidCompany = (company) => {\n\treturn VALID_COMPANY_PROPERTIES.every((prop) =>\n\t\tObject.prototype.hasOwnProperty.call(company, prop)\n\t);\n};\n\nexport default isValidCompany;\n","import { getMemberIdFromUrn } from 'workers/processExtractedData/utils/identifiers';\nimport createSeamlessCompany from 'workers/processExtractedData/utils/createSeamlessCompany';\nimport isValidCompany from 'utils/isValidCompany';\n\nconst STANDARD_COMPANY_FULL_PROFILE_RECIPE_TYPE =\n\t'com.linkedin.voyager.deco.organization.web.WebFullCompanyMain';\nconst STANDARD_COMPANY_PROFILE_ITEMS_TYPE_MAP = {\n\taffiliatedCompanies: 'organization.company',\n\tfollowingInfo: 'common.followinginfo',\n\tindustry: 'common.industry',\n};\n\nconst parseStandardCompanyProfile = (data) => {\n\tconst _data = [...data];\n\tconst collectionProfile = _data.find((item) =>\n\t\titem.$recipeTypes?.includes?.(STANDARD_COMPANY_FULL_PROFILE_RECIPE_TYPE)\n\t);\n\n\tconst {\n\t\tcallToAction,\n\t\tcompanyPageUrl,\n\t\tcompanyType,\n\t\tconfirmedLocations,\n\t\tdescription,\n\t\tentityUrn,\n\t\tfoundedOn,\n\t\theadquarter,\n\t\tlogo,\n\t\tname,\n\t\tsalesNavigatorCompanyUrl,\n\t\tspecialities,\n\t\tstaffCount,\n\t\tstaffCountRange,\n\t\tuniversalName,\n\t\turl,\n\t} = collectionProfile;\n\n\tconst affiliatedCompaniesData = _data.filter((acn) =>\n\t\tacn.$type\n\t\t\t?.toLowerCase()\n\t\t\t.includes(\n\t\t\t\tSTANDARD_COMPANY_PROFILE_ITEMS_TYPE_MAP.affiliatedCompanies\n\t\t\t)\n\t);\n\n\tconst collectionAffiliatedCompaniesNames = affiliatedCompaniesData.reduce(\n\t\t(arr, item) => {\n\t\t\tif (item?.name !== collectionProfile.name) {\n\t\t\t\treturn [...arr, item.name];\n\t\t\t}\n\t\t\treturn [];\n\t\t},\n\t\t[]\n\t);\n\n\tconst collectionFollowingInfo = _data.find(\n\t\t(item) =>\n\t\t\titem.$type\n\t\t\t\t?.toLowerCase()\n\t\t\t\t.includes(\n\t\t\t\t\tSTANDARD_COMPANY_PROFILE_ITEMS_TYPE_MAP.followingInfo\n\t\t\t\t) && item?.entityUrn === collectionProfile['*followingInfo']\n\t);\n\n\tlet industries = _data\n\t\t.filter((item) =>\n\t\t\titem?.$type\n\t\t\t\t?.toLowerCase()\n\t\t\t\t.includes(STANDARD_COMPANY_PROFILE_ITEMS_TYPE_MAP.industry)\n\t\t)\n\t\t.reduce((arr, item) => [...arr, item.localizedName], []);\n\n\tindustries =\n\t\tArray.isArray(industries) && industries.length ? [industries[0]] : null;\n\n\tlet companyUrl;\n\tif (\n\t\tcallToAction?.callToActionType === 'VIEW_WEBSITE' &&\n\t\tcallToAction?.url\n\t) {\n\t\tcompanyUrl = callToAction.url;\n\t}\n\n\tconst companyData = {\n\t\tlinkedInId: entityUrn && getMemberIdFromUrn(entityUrn),\n\t\tlinkedInProfileIdentifier: universalName,\n\t\tlinkedInUrn: entityUrn,\n\t\tlinkedInProfileUrl: url,\n\t\tlinkedInSalesNavUrl: salesNavigatorCompanyUrl,\n\t\tname,\n\t\tlogo,\n\t\tdescription,\n\t\tfoundedOn: foundedOn?.year,\n\t\tindustries:\n\t\t\tArray.isArray(industries) && industries.length\n\t\t\t\t? [industries[0]]\n\t\t\t\t: null,\n\t\tspecialities,\n\t\tstaffCount,\n\t\tstaffCountRange,\n\t\ttype: companyType?.localizedName,\n\t\tcompanyPageUrl,\n\t\tcompanyUrl,\n\t\tconfirmedLocations,\n\t\theadquarter,\n\t\tlinkedInFollowerCount: collectionFollowingInfo?.followerCount,\n\t\taffiliatedCompanies: collectionAffiliatedCompaniesNames,\n\t};\n\n\tconst parsedCompany = createSeamlessCompany(companyData);\n\tparsedCompany.pageSectionSourced = 'standardCompanyProfile';\n\tparsedCompany.itemType = 'company';\n\treturn isValidCompany(parsedCompany) ? parsedCompany : null;\n};\n\nexport default parseStandardCompanyProfile;\n","import { expose } from 'comlink';\nimport parseStandardCompanyPeopleYouMayKnow from 'workers/processExtractedData/processStandardCompanyProfileData/parseStandardCompanyPeopleYouMayKnow';\nimport parseStandardCompanyProfile from 'workers/processExtractedData/processStandardCompanyProfileData/parseStandardCompanyProfile';\n\nconst PEOPLE_YOU_MAY_KNOW_METADATA_$TYPE =\n\t'com.linkedin.voyager.search.SearchMetadata';\nconst PEOPLE_YOU_MAY_KNOW_METADATA_TYPE = 'PEOPLE';\nconst hasStandardCompanyPeopleYouMayKnowData = (data) =>\n\tdata.data?.metadata?.$type === PEOPLE_YOU_MAY_KNOW_METADATA_$TYPE &&\n\tdata.data.metadata.type === PEOPLE_YOU_MAY_KNOW_METADATA_TYPE;\n\nconst STANDARD_COMPANY_FULL_PROFILE_RECIPE_TYPE =\n\t'com.linkedin.voyager.deco.organization.web.WebFullCompanyMain';\n\nfunction hasStandardCompanyFullProfileData(data) {\n\treturn (\n\t\tdata.included?.length &&\n\t\tdata.included.some(\n\t\t\t(item) =>\n\t\t\t\titem.$recipeTypes?.length &&\n\t\t\t\titem.$recipeTypes.includes(\n\t\t\t\t\tSTANDARD_COMPANY_FULL_PROFILE_RECIPE_TYPE\n\t\t\t\t)\n\t\t)\n\t);\n}\n\nconst processStandardCompanyProfileData = async (pageData) => {\n\tlet profileUrlOverride;\n\tlet parsedItems = [];\n\n\tif (hasStandardCompanyPeopleYouMayKnowData(pageData)) {\n\t\tconst contactParsers = pageData.included.map((item) =>\n\t\t\tparseStandardCompanyPeopleYouMayKnow({\n\t\t\t\tdata: item,\n\t\t\t\tuiData: pageData.data,\n\t\t\t})\n\t\t);\n\n\t\tif (contactParsers?.length) {\n\t\t\tparsedItems = await Promise.all(contactParsers);\n\t\t}\n\t} else if (hasStandardCompanyFullProfileData(pageData)) {\n\t\tconst standardCompanyProfileData = parseStandardCompanyProfile(\n\t\t\tpageData.included\n\t\t);\n\t\tif (standardCompanyProfileData) {\n\t\t\tprofileUrlOverride =\n\t\t\t\tstandardCompanyProfileData?.linkedInProfileUrl || null;\n\t\t\tparsedItems = [standardCompanyProfileData];\n\t\t}\n\t}\n\n\treturn {\n\t\tprofileUrlOverride,\n\t\tparsedItems,\n\t};\n};\n\nexpose(processStandardCompanyProfileData, self);\n"],"names":["proxyMarker","Symbol","createEndpoint","releaseProxy","throwMarker","isObject","val","transferHandlers","Map","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","start","createProxy","target","value","serialized","Error","isError","message","name","stack","Object","assign","ep","self","addEventListener","callback","ev","data","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfers","transferCache","set","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","endpoint","constructor","isMessagePort","close","throwIfProxyReleased","isReleased","isProxyReleased","Proxy","get","_target","requestResponseMessage","p","toString","length","r","bind","_thisArg","rawArgumentList","last","processArguments","construct","processed","v","arr","Array","prototype","concat","WeakMap","handler","serializedValue","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l","GET_MEMBER_ID_FROM_URN_REG_EXP","SALES_NAV_ID_FROM_URN_REG_EXP","getMemberIdFromUrn","urn","match","groups","memberId","isArray","cleanEmptyNullData","cleanedData","entries","forEach","k","keys","splice","cleanLocationString","locationString","replace","cleanUrl","url","newUrl","trim","test","parsePositionFromOccupationString","occupation","occupationParts","indexOf","split","companyName","title","pop","formatEmailAddress","emails","primaryEmail","emailAddress","err","LOCATION_OBJECT_KEYS","formatCompanyLocationObject","location","street1","street2","city","state","postCode","country","isEmpty","some","includes","hasValidLocationKeys","line1","line2","geographicArea","postalCode","profilePicture","picture","artifacts","rootUrl","fileIdentifyingUrlPathSegment","industries","formattedIndustries","values","ind","industry","push","formatContactEducations","educations","filter","education","schoolName","degree","degreeName","activities","fieldOfStudy","dateRange","year","dateRangeStartYear","end","dateRangeEndYear","startedOn","startedOnYear","endedOn","endedOnYear","endDateOn","endDateOnYear","startDateOn","startDateOnYear","startDateYear","endDateYear","startYear","endYear","fieldsOfStudy","educationFieldOfStudy","ensureArray","startDate","endDate","formatContactSkills","skills","skillsArr","skill","_skills","formatContactLanguages","languages","languagesArr","language","_languages","getCurrentPositions","positions","current","possibleString","Boolean","liMemberId","publicIdentifier","salesNavIdentifier","recruiterIdentifier","flagshipProfileUrl","firstName","lastName","fullName","birthDateOn","summary","phoneNumbers","social","awards","certifications","courses","organizations","patents","projects","publications","volunteeringExperiences","contactName","liProfileUrl","liSalesNavUrl","liRecruiterUrl","_positions","hasResults","position","company","companyUrn","companyUrnResolutionResult","companyResolutionResult","description","employmentType","locationName","companyUrnLocation","_industries","_dateRangeStart","_dateRangeStartDate","_dateRangeEndDate","_dateRangeEnd","_companyUrn","_location","displayName","month","fullString","linkedInCompanyId","titleName","formatContactPosition","pos","ac","a","uniqueBy","person","liPublicIdentifier","decodeURI","liSalesNavId","liRecruiterId","isValidString","birthday","liImageUrl","formatProfilePicture","contactEmail","locationFullString","meta","formatContactIndustries","patent","project","publication","itemType","profile","_profile","currentPositions","setCompanyNameAndTitle","VALID_CONTACT_PRIMARY_PROPERTIES","VALID_CONTACT_SECONDARY_PROPERTIES","uiData","entityUrn","objectUrn","trackingUrn","profilePictureMiniProfile","profilePictureNormalizedProfile","locationNormalizedProfile","occupationMiniProfile","headline","occupationNormalizedProfile","occupationFromCurrentSnippet","locationMiniProfile","matchingUiData","elements","find","matchingUiDataItem","item","subline","text","snippetText","startsWith","formatOccupationSnippet","contactOpts","salesNavId","locationDisplayName","parsedContact","createSeamlessContact","pageSectionSourced","contact","hasOwnProperty","call","every","toLowerCase","REVENUE_RANGES","formatRevenueRange","annualRevenue","parseInt","range","PREMIUM_COMPANY_PROFILE_URL","linkedInId","INVALID_WEBSITES","isValidCompanyWebsite","website","invalidUrl","linkedInProfileIdentifier","linkedInUrn","linkedInProfileUrl","linkedInSalesNavUrl","logo","foundedOn","specialities","staffCount","staffCountRange","staffRange","companyPageUrl","companyUrl","confirmedLocations","headquarter","headquarters","linkedInFollowerCount","affiliatedCompanies","addresses","_headquarter","locationObject","s","getCompanyLocationStringFromObject","confirmedLocation","formattedLocation","_staffRange","formatStaffCountRange","employeeCountNmlzd","count","rangeLower","_count","numbers","max","getNormalizedEmployeeCount","parsedAnnualRevenue","parseFloat","toFixed","companyWebsite","companyLogoUrl","revenueRevenue","VALID_COMPANY_PROPERTIES","_data","collectionProfile","$recipeTypes","callToAction","companyType","salesNavigatorCompanyUrl","universalName","collectionAffiliatedCompaniesNames","acn","$type","collectionFollowingInfo","localizedName","callToActionType","companyData","followerCount","parsedCompany","createSeamlessCompany","async","profileUrlOverride","parsedItems","pageData","metadata","contactParsers","included","parseStandardCompanyPeopleYouMayKnow","all","hasStandardCompanyFullProfileData","standardCompanyProfileData","parseStandardCompanyProfile"],"sourceRoot":""}