{"version":3,"file":"js/processPremiumSavedAccountsData.worker.100f7eb6d8db114cfe59.js","mappings":"mBAYA,MAAMA,EAAcC,OAAO,iBACrBC,EAAiBD,OAAO,oBACxBE,EAAeF,OAAO,wBACtBG,EAAcH,OAAO,kBACrBI,EAAYC,GAAwB,iBAARA,GAA4B,OAARA,GAAgC,mBAARA,EAgDxEC,EAAmB,IAAIC,IAAI,CAC7B,CAAC,QA7CwB,CACzBC,UAAYH,GAAQD,EAASC,IAAQA,EAAIN,GACzCU,UAAUC,GACN,MAAM,MAAEC,EAAK,MAAEC,GAAU,IAAIC,eAE7B,OADAC,EAAOJ,EAAKC,GACL,CAACC,EAAO,CAACA,KAEpBG,YAAYC,IACRA,EAAKC,QAuHFC,EAtHSF,EAsHO,GADTG,cAhFd,CAAC,QA/BwB,CACzBX,UAAYY,GAAUhB,EAASgB,IAAUjB,KAAeiB,EACxDX,WAAU,MAAEW,IACR,IAAIC,EAcJ,OAZIA,EADAD,aAAiBE,MACJ,CACTC,SAAS,EACTH,MAAO,CACHI,QAASJ,EAAMI,QACfC,KAAML,EAAMK,KACZC,MAAON,EAAMM,QAKR,CAAEH,SAAS,EAAOH,MAAAA,GAE5B,CAACC,EAAY,KAExBN,YAAYM,GACR,GAAIA,EAAWE,QACX,MAAMI,OAAOC,OAAO,IAAIN,MAAMD,EAAWD,MAAMI,SAAUH,EAAWD,OAExE,MAAMC,EAAWD,WAUzB,SAASN,EAAOJ,EAAKmB,EAAKC,MACtBD,EAAGE,iBAAiB,WAAW,SAASC,EAASC,GAC7C,IAAKA,IAAOA,EAAGC,KACX,OAEJ,MAAM,GAAEC,EAAE,KAAEC,EAAI,KAAEC,GAASV,OAAOC,OAAO,CAAES,KAAM,IAAMJ,EAAGC,MACpDI,GAAgBL,EAAGC,KAAKI,cAAgB,IAAIC,IAAIC,GACtD,IAAIC,EACJ,IACI,MAAMC,EAASL,EAAKM,MAAM,GAAI,GAAGC,QAAO,CAAClC,EAAKmC,IAASnC,EAAImC,IAAOnC,GAC5DoC,EAAWT,EAAKO,QAAO,CAAClC,EAAKmC,IAASnC,EAAImC,IAAOnC,GACvD,OAAQ0B,GACJ,IAAK,MAEGK,EAAcK,EAElB,MACJ,IAAK,MAEGJ,EAAOL,EAAKM,OAAO,GAAG,IAAMH,EAAcP,EAAGC,KAAKd,OAClDqB,GAAc,EAElB,MACJ,IAAK,QAEGA,EAAcK,EAASC,MAAML,EAAQJ,GAEzC,MACJ,IAAK,YAGGG,EAyIxB,SAAe/B,GACX,OAAOiB,OAAOC,OAAOlB,EAAK,CAAE,CAACX,IAAc,IA1ITiD,CADA,IAAIF,KAAYR,IAGlC,MACJ,IAAK,WACD,CACI,MAAM,MAAE3B,EAAK,MAAEC,GAAU,IAAIC,eAC7BC,EAAOJ,EAAKE,GACZ6B,EA8HxB,SAAkB/B,EAAKuC,GAEnB,OADAC,EAAcC,IAAIzC,EAAKuC,GAChBvC,EAhI2B0C,CAASzC,EAAO,CAACA,IAEnC,MACJ,IAAK,UAEG8B,OAAcY,EAElB,MACJ,QACI,QAGZ,MAAOjC,GACHqB,EAAc,CAAErB,MAAAA,EAAO,CAACjB,GAAc,GAE1CmD,QAAQC,QAAQd,GACXe,OAAOpC,IACD,CAAEA,MAAAA,EAAO,CAACjB,GAAc,MAE9BsD,MAAMhB,IACP,MAAOiB,EAAWC,GAAiBC,EAAYnB,GAC/CZ,EAAGgC,YAAYlC,OAAOC,OAAOD,OAAOC,OAAO,GAAI8B,GAAY,CAAEvB,GAAAA,IAAOwB,GACvD,YAATvB,IAEAP,EAAGiC,oBAAoB,UAAW9B,GAClC+B,EAAclC,UAItBA,EAAGZ,OACHY,EAAGZ,QAMX,SAAS8C,EAAcC,IAHvB,SAAuBA,GACnB,MAAqC,gBAA9BA,EAASC,YAAYxC,MAGxByC,CAAcF,IACdA,EAASG,QAKjB,SAASC,EAAqBC,GAC1B,GAAIA,EACA,MAAM,IAAI/C,MAAM,8CAGxB,SAASJ,EAAYW,EAAIQ,EAAO,GAAIlB,EAAS,cACzC,IAAImD,GAAkB,EACtB,MAAMtB,EAAQ,IAAIuB,MAAMpD,EAAQ,CAC5BqD,IAAIC,EAAS5B,GAET,GADAuB,EAAqBE,GACjBzB,IAAS3C,EACT,MAAO,IACIwE,EAAuB7C,EAAI,CAC9BO,KAAM,UACNC,KAAMA,EAAKE,KAAKoC,GAAMA,EAAEC,eACzBnB,MAAK,KACJM,EAAclC,GACdyC,GAAkB,KAI9B,GAAa,SAATzB,EAAiB,CACjB,GAAoB,IAAhBR,EAAKwC,OACL,MAAO,CAAEpB,KAAM,IAAMT,GAEzB,MAAM8B,EAAIJ,EAAuB7C,EAAI,CACjCO,KAAM,MACNC,KAAMA,EAAKE,KAAKoC,GAAMA,EAAEC,eACzBnB,KAAKjB,GACR,OAAOsC,EAAErB,KAAKsB,KAAKD,GAEvB,OAAO5D,EAAYW,EAAI,IAAIQ,EAAMQ,KAErCM,IAAIsB,EAAS5B,EAAMC,GACfsB,EAAqBE,GAGrB,MAAOlD,EAAOuC,GAAiBC,EAAYd,GAC3C,OAAO4B,EAAuB7C,EAAI,CAC9BO,KAAM,MACNC,KAAM,IAAIA,EAAMQ,GAAMN,KAAKoC,GAAMA,EAAEC,aACnCxD,MAAAA,GACDuC,GAAeF,KAAKjB,IAE3BO,MAAM0B,EAASO,EAAUC,GACrBb,EAAqBE,GACrB,MAAMY,EAAO7C,EAAKA,EAAKwC,OAAS,GAChC,GAAIK,IAASjF,EACT,OAAOyE,EAAuB7C,EAAI,CAC9BO,KAAM,aACPqB,KAAKjB,GAGZ,GAAa,SAAT0C,EACA,OAAOhE,EAAYW,EAAIQ,EAAKM,MAAM,GAAI,IAE1C,MAAOL,EAAcqB,GAAiBwB,EAAiBF,GACvD,OAAOP,EAAuB7C,EAAI,CAC9BO,KAAM,QACNC,KAAMA,EAAKE,KAAKoC,GAAMA,EAAEC,aACxBtC,aAAAA,GACDqB,GAAeF,KAAKjB,IAE3B4C,UAAUX,EAASQ,GACfb,EAAqBE,GACrB,MAAOhC,EAAcqB,GAAiBwB,EAAiBF,GACvD,OAAOP,EAAuB7C,EAAI,CAC9BO,KAAM,YACNC,KAAMA,EAAKE,KAAKoC,GAAMA,EAAEC,aACxBtC,aAAAA,GACDqB,GAAeF,KAAKjB,MAG/B,OAAOQ,EAKX,SAASmC,EAAiB7C,GACtB,MAAM+C,EAAY/C,EAAaC,IAAIqB,GACnC,MAAO,CAACyB,EAAU9C,KAAK+C,GAAMA,EAAE,MALnBC,EAK+BF,EAAU9C,KAAK+C,GAAMA,EAAE,KAJ3DE,MAAMC,UAAUC,OAAO3C,MAAM,GAAIwC,KAD5C,IAAgBA,EAOhB,MAAMrC,EAAgB,IAAIyC,QAe1B,SAAS/B,EAAYxC,GACjB,IAAK,MAAOK,EAAMmE,KAAYtF,EAC1B,GAAIsF,EAAQpF,UAAUY,GAAQ,CAC1B,MAAOyE,EAAiBlC,GAAiBiC,EAAQnF,UAAUW,GAC3D,MAAO,CACH,CACIgB,KAAM,UACNX,KAAAA,EACAL,MAAOyE,GAEXlC,GAIZ,MAAO,CACH,CACIvB,KAAM,MACNhB,MAAAA,GAEJ8B,EAAcsB,IAAIpD,IAAU,IAGpC,SAASoB,EAAcpB,GACnB,OAAQA,EAAMgB,MACV,IAAK,UACD,OAAO9B,EAAiBkE,IAAIpD,EAAMK,MAAMV,YAAYK,EAAMA,OAC9D,IAAK,MACD,OAAOA,EAAMA,OAGzB,SAASsD,EAAuB7C,EAAIiE,EAAK7C,GACrC,OAAO,IAAIK,SAASC,IAChB,MAAMpB,EAeH,IAAIqD,MAAM,GACZO,KAAK,GACLxD,KAAI,IAAMyD,KAAKC,MAAMD,KAAKE,SAAWC,OAAOC,kBAAkBxB,SAAS,MACvEyB,KAAK,KAjBNxE,EAAGE,iBAAiB,WAAW,SAASuE,EAAErE,GACjCA,EAAGC,MAASD,EAAGC,KAAKC,IAAMF,EAAGC,KAAKC,KAAOA,IAG9CN,EAAGiC,oBAAoB,UAAWwC,GAClC/C,EAAQtB,EAAGC,UAEXL,EAAGZ,OACHY,EAAGZ,QAEPY,EAAGgC,YAAYlC,OAAOC,OAAO,CAAEO,GAAAA,GAAM2D,GAAM7C,MChSnD,MA4BMsD,EACL,oEC9BKC,EAAsBtE,IAC3B,IAAKA,EACJ,MAAO,GAGR,MAAMuE,EAAcvE,EAmBpB,OAlBAP,OAAO+E,QAAQD,GAAaE,SAAQ,EAAEC,EAAGtB,MACpCA,GAAkB,iBAANA,GACfkB,EAAmBlB,IAIlBA,GAAkB,iBAANA,IAAmB3D,OAAOkF,KAAKvB,GAAGT,QAA9CS,MACDA,KAGIE,MAAMsB,QAAQL,GACjBA,EAAYM,OAAOH,EAAG,UAEfH,EAAYG,OAKfH,GCmBR,EAzC8BO,IAC7B,IACC,IAAIC,EAAUD,EAEd,GAAIC,GAA8B,iBAAZA,EAAsB,CAC3C,MAAM,UAAEC,EAAF,QAAaC,GAAYF,EAwB/B,GAtBCE,GAAStC,QACTsC,EAAQC,SAAS,SACjBF,GACA1B,MAAMsB,QAAQI,GAEdD,EACCE,EACAD,EAAUA,EAAUrC,OAAS,GAC3BwC,8BAEDF,GAAYA,EAAQtC,SACtBqC,GAAWrC,SACXqC,EAAUA,EAAUrC,OAAS,GAAGwC,gCAChCH,EACCA,EAAUrC,OAAS,GAClBwC,8BAA8BD,SAAS,UAEzCH,EACCC,EAAUA,EAAUrC,OAAS,GAC3BwC,gCAGCJ,IAAYA,EAAQpC,OACxB,OAKF,OADAoC,EAAUA,GDEMK,CAAAA,IACjB,IAAIC,EAASD,GAAsB,iBAARA,GAAoBA,EAAIE,OACnD,OAAKD,GAKD,+BAA+BE,KAAKF,KACvCA,EAASA,EAAOG,QAAQ,OAAQ,QAG1BH,GAPCD,GCNcK,CAASV,GACvBA,EACN,MAAOW,GACR,SCrCIC,EAAiB,CACtB,WAAY,CAAC,EAAG,KAChB,YAAa,CAAC,OAAQ,KACtB,UAAW,CAAC,QAAS,KACrB,WAAY,CAAC,QAAS,KACtB,YAAa,CAAC,SAAU,KACxB,aAAc,CAAC,SAAU,KACzB,cAAe,CAAC,UAAW,KAC3B,YAAa,CAAC,UAAW,KACzB,OAAQ,CAAC,WAAY,OAQf,SAASC,EAAmBC,GAClC,MAAM1H,EAAM2H,SAASD,EAAe,IACpC,OAAOpG,OAAOkF,KAAKgB,GAAgBI,QAAQrB,IAC1C,MAAMsB,EAAQL,EAAejB,GAC7B,OAAOvG,GAAO6H,EAAM,IAAM7H,GAAO6H,EAAM,MACrC,GCVJ,MAKA,EALkB7H,IACjB,MAAM+B,SAAc/B,EACpB,QAASA,IAAiB,aAAT+B,GAAgC,WAATA,ICYzC,EAZiB/B,GACL,MAAPA,IAIAmF,MAAMsB,QAAQzG,GACK,IAAfA,EAAIwE,OAGLzE,EAASC,IAAoC,IAA5BsB,OAAOkF,KAAKxG,GAAKwE,QCuBpCsD,EAAuB,CAC5B,QACA,QACA,OACA,iBACA,aACA,WAUM,SAASC,EAA4BC,GAC3C,IACC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAaJ,OAXIN,GAjBN,SAA8BA,GAC7B,OACCjI,EAASiI,KACRO,EAAQP,IACT1G,OAAOkF,KAAKwB,GAAUQ,MAAMjC,GAAMuB,EAAqBf,SAASR,KAahDkC,CAAqBT,MAEnCU,MAAOT,EACPU,MAAOT,EACPC,KAAAA,EACAS,eAAgBR,EAChBS,WAAYR,EACZC,QAAAA,GACGN,GAGE,CACNC,QAAAA,EACAC,QAAAA,EACAC,KAAAA,EACAC,MAAAA,EACAC,SAAAA,EACAC,QAAAA,GAEA,MAAOf,GACR,OAAO,MC3FT,MAEA,EAFoB1F,GAASsD,MAAMsB,QAAQ5E,KAAU0G,EAAQ1G,GCcvDiH,EAA+BC,GACnC,8DAA6DA,qBAEzDC,EAAmB,CAAC,eAAgB,aAC1C,SAASC,EAAsBC,GAC9B,OACCA,GACAF,EAAiBG,OAAOC,IAAgBF,EAAQnC,SAASqC,KAI3D,MAmHA,EAnH+BvH,IAC9B,MAAM,WAELkH,EAFK,0BAGLM,EAHK,YAILC,EAJK,mBAOLC,EAPK,oBAQLC,EARK,KAWLpI,EAXK,KAYLqI,EAZK,YAaLC,EAbK,cAgBLhC,EAhBK,UAiBLiC,EAjBK,WAkBLC,EAlBK,aAmBLC,EAnBK,WAoBLC,EACAC,gBAAiBC,EArBZ,KAsBLjI,EAtBK,eAyBLkI,EAzBK,WA0BLC,EA1BK,QA2BLhB,EA3BK,mBA4BLiB,EA5BK,YA6BLC,EA7BK,aA8BLC,EA9BK,mBA+BLC,EA/BK,sBAkCLC,EAlCK,oBAqCLC,GACG3I,EAEE4I,EAAYH,EAAqB,CAACA,GAAsB,GAE9D,IAAItC,EAAWsC,EACf,GAAIvK,EAASqK,IAAgBrK,EAASsK,GAAe,CACpD,MAAMK,EAAe3C,EACpBqC,GAAeC,GAEX9B,EAAQmC,KACZD,EAAUE,KAAKD,GACV1C,IACJA,EFmBG,SAA4C4C,GAClD,IACC,IAAIC,EACJ,IAAKtC,EAAQqC,GAAiB,CAC7B,MAAM,QACL3C,EADK,QAELC,EAAU,GAFL,KAGLC,EAHK,MAILC,EAJK,SAKLC,EALK,QAMLC,GACGsC,EACJC,EAAa,CAAC5C,EAASC,EAASC,EAAMC,EAAOC,EAAUC,GACrDpG,KAAK4I,GAAMA,GAAKA,EAAE3D,SAClBS,QAAQkD,KAAQA,IAChB9E,KAAK,KAOR,MAJ0B,iBAAf6E,GAA4BA,EAAWrG,SACjDqG,OAAa7H,GAGP6H,EACN,MAAOtD,GACR,OAAO,ME3CMwD,CAAmCL,KAKjD,GAAIM,EAAWb,GACd,IAAK,MAAMc,KAAqBd,EAAoB,CACnD,MAAMe,EACLnD,EAA4BkD,GACzBC,GACHT,EAAUE,KAAKO,GAKlB,MAAMnB,EAAkBC,GLlElB,SAA+BA,GACrC,IAAImB,EAAcnB,EAWlB,MAVoB,gBAAhBmB,EACHA,EAAc,QACkB,MAAtBA,GAAavK,QAEtBuK,EADGA,EAAYC,IACA,GAAED,EAAYvK,WAAWuK,EAAYC,MAErC,GAAED,EAAYvK,SAIxBuK,EKsD+BE,CAAsBrB,GACtDsB,GACJxB,GAAcC,IL/CV,UAAoC,MAAEwB,EAAF,MAAS1D,IACnD,IAiBI2D,EAjBAC,EAASF,EACb,OAAKE,GAAY5D,IAA2B,iBAAVA,GAAuBA,EAAMrD,SAK/DiH,KACoB,iBAAXA,GACPA,EAAOjH,UACLiH,EAAOpE,QAAQ,MAAO,KACzBoE,IAEI5D,GAA2B,iBAAVA,IAAuBA,EAAMrD,OAC3CiH,GAMPD,EADa,iBAAV3D,EACU,EAGXA,GAASA,EAAMjH,OACE,iBAAViH,GACPA,EAAMrD,QACNqD,EACER,QAAQ,MAAO,IACfqE,MAAM,KAAK,GACXA,MAAM,MAAM,GACZrE,QAAQ,MAAO,KM5DLsE,EN+DD,GAAGH,GAAc,EAAGC,KM9DhBE,EAAQnH,QAAUmB,KAAKiG,OAAOD,UNiCtB,IAAXF,EAAyBA,EAAS,KMlClCE,IAAAA,ED8EdE,CAA2B,CAC1BN,MAAOzB,EACPjC,MAAOkC,IAGH+B,EACLpE,GAAiB5B,OAAOiG,WAAWrE,GAAesE,QAAQ,GAErDC,EAAiB/C,GAAWe,GAAkBC,EAEpD,IAAIgC,EAAU,CACbnD,WAAAA,EACAM,0BAAAA,EACAC,YAAAA,EACAC,mBACCA,GACCF,GACC,oCAAsCA,IACzCG,oBACCA,GACCT,GAAcD,EAA4BC,GAC5C3H,KAAAA,EACAsI,YAAAA,EACAyC,eAAgB1C,GAAQ2C,EAAqB3C,GAC7C/B,cAAeoE,EACfO,eACCP,GAAuBrE,EAAmBqE,GAC3CnC,UAAAA,EACAC,WAAAA,EACAC,aAAAA,EACAC,WAAAA,EACAC,gBAAAA,EACAuB,mBAAAA,EACAvJ,KAAAA,EACA0I,UAAWO,EAAWP,GAAaA,EAAY,KAC/CzC,SAAAA,EACAkB,QAASD,EAAsBgD,GAAkBA,EAAiB,KAClE1B,sBAAuBA,KAA2BA,EAClDC,oBAAAA,EACA8B,SAAU,WAIX,OADAJ,EAAU/F,EAAmB+F,GACtBA,GE3IFK,EAA2B,CAAC,OAAQ,aAAc,eC8BxD,EA1BmCC,IAClC,MAAM,YACLC,EADK,2BAELC,EAFK,mBAGLC,EAHK,UAILC,EAJK,SAKLC,EALK,SAML7E,GACGwE,EAEEM,EAAc,CACnB/D,WAAY6D,IX4FqBG,EW5FWH,EX6FpBG,EAAIC,MAAM9G,IACV+G,QAAQC,UW7FhC5D,YAAasD,EACbxL,KAAMqL,EACNhD,KAAMiD,EACN3C,gBAAiB4C,EACjB/C,WAAYiD,EAAW,CAACA,GAAY,KACpCvC,mBAAoBtC,GXsFf,IAA4B+E,EWnFlC,MAAMI,EAAgBC,EAAsBN,GAG5C,OAFAK,EAAcE,mBAAqB,uBACnCF,EAAcb,SAAW,UDzBFJ,EC0BDiB,EDzBfZ,EAAyBpD,OAAO3G,GACtClB,OAAO8D,UAAUkI,eAAeC,KAAKrB,EAAS1J,KCwBR2K,EAAgB,KD1BhCjB,IAAAA,GE4BxBzL,GAfgD+M,MAAAA,IAC/C,IAAIC,EAAc,GAClB,GATOC,QASkBC,EARnBC,UAAL,QAHD,gDAWoC,CACnC,MAAMC,EAAiBF,EAASG,SAAS5L,KAAKsK,GAC7CuB,EAA0BvB,KAK3B,OAHIqB,GAAgBrJ,SACnBiJ,QAAoBxK,QAAQ+K,IAAIH,IAE1B,CACNJ,YAAAA,MAK6ChM,O","sources":["webpack://@seamless/chrome-extension/../../node_modules/comlink/dist/esm/comlink.mjs","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/identifiers.js","webpack://@seamless/chrome-extension/./src/utils/data.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/formatProfilePicture.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/organization.js","webpack://@seamless/chrome-extension/./src/utils/coreDupes/isObject.js","webpack://@seamless/chrome-extension/./src/utils/coreDupes/isEmpty.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/contactInfo.js","webpack://@seamless/chrome-extension/./src/utils/hasResults.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/utils/createSeamlessCompany.js","webpack://@seamless/chrome-extension/./src/utils/number.js","webpack://@seamless/chrome-extension/./src/utils/isValidCompany.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/processPremiumSavedAccountsData/parsePremiumSavedAccounts.js","webpack://@seamless/chrome-extension/./src/workers/processExtractedData/processPremiumSavedAccountsData/processPremiumSavedAccountsData.worker.js"],"sourcesContent":["/**\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst proxyMarker = Symbol(\"Comlink.proxy\");\r\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\r\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\r\nconst throwMarker = Symbol(\"Comlink.thrown\");\r\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\r\n/**\r\n * Internal transfer handle to handle objects marked to proxy.\r\n */\r\nconst proxyTransferHandler = {\r\n    canHandle: (val) => isObject(val) && val[proxyMarker],\r\n    serialize(obj) {\r\n        const { port1, port2 } = new MessageChannel();\r\n        expose(obj, port1);\r\n        return [port2, [port2]];\r\n    },\r\n    deserialize(port) {\r\n        port.start();\r\n        return wrap(port);\r\n    },\r\n};\r\n/**\r\n * Internal transfer handler to handle thrown exceptions.\r\n */\r\nconst throwTransferHandler = {\r\n    canHandle: (value) => isObject(value) && throwMarker in value,\r\n    serialize({ value }) {\r\n        let serialized;\r\n        if (value instanceof Error) {\r\n            serialized = {\r\n                isError: true,\r\n                value: {\r\n                    message: value.message,\r\n                    name: value.name,\r\n                    stack: value.stack,\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            serialized = { isError: false, value };\r\n        }\r\n        return [serialized, []];\r\n    },\r\n    deserialize(serialized) {\r\n        if (serialized.isError) {\r\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\r\n        }\r\n        throw serialized.value;\r\n    },\r\n};\r\n/**\r\n * Allows customizing the serialization of certain values.\r\n */\r\nconst transferHandlers = new Map([\r\n    [\"proxy\", proxyTransferHandler],\r\n    [\"throw\", throwTransferHandler],\r\n]);\r\nfunction expose(obj, ep = self) {\r\n    ep.addEventListener(\"message\", function callback(ev) {\r\n        if (!ev || !ev.data) {\r\n            return;\r\n        }\r\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\r\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\r\n        let returnValue;\r\n        try {\r\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\r\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\r\n            switch (type) {\r\n                case \"GET\" /* GET */:\r\n                    {\r\n                        returnValue = rawValue;\r\n                    }\r\n                    break;\r\n                case \"SET\" /* SET */:\r\n                    {\r\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\r\n                        returnValue = true;\r\n                    }\r\n                    break;\r\n                case \"APPLY\" /* APPLY */:\r\n                    {\r\n                        returnValue = rawValue.apply(parent, argumentList);\r\n                    }\r\n                    break;\r\n                case \"CONSTRUCT\" /* CONSTRUCT */:\r\n                    {\r\n                        const value = new rawValue(...argumentList);\r\n                        returnValue = proxy(value);\r\n                    }\r\n                    break;\r\n                case \"ENDPOINT\" /* ENDPOINT */:\r\n                    {\r\n                        const { port1, port2 } = new MessageChannel();\r\n                        expose(obj, port2);\r\n                        returnValue = transfer(port1, [port1]);\r\n                    }\r\n                    break;\r\n                case \"RELEASE\" /* RELEASE */:\r\n                    {\r\n                        returnValue = undefined;\r\n                    }\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n        }\r\n        catch (value) {\r\n            returnValue = { value, [throwMarker]: 0 };\r\n        }\r\n        Promise.resolve(returnValue)\r\n            .catch((value) => {\r\n            return { value, [throwMarker]: 0 };\r\n        })\r\n            .then((returnValue) => {\r\n            const [wireValue, transferables] = toWireValue(returnValue);\r\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\r\n            if (type === \"RELEASE\" /* RELEASE */) {\r\n                // detach and deactive after sending release response above.\r\n                ep.removeEventListener(\"message\", callback);\r\n                closeEndPoint(ep);\r\n            }\r\n        });\r\n    });\r\n    if (ep.start) {\r\n        ep.start();\r\n    }\r\n}\r\nfunction isMessagePort(endpoint) {\r\n    return endpoint.constructor.name === \"MessagePort\";\r\n}\r\nfunction closeEndPoint(endpoint) {\r\n    if (isMessagePort(endpoint))\r\n        endpoint.close();\r\n}\r\nfunction wrap(ep, target) {\r\n    return createProxy(ep, [], target);\r\n}\r\nfunction throwIfProxyReleased(isReleased) {\r\n    if (isReleased) {\r\n        throw new Error(\"Proxy has been released and is not useable\");\r\n    }\r\n}\r\nfunction createProxy(ep, path = [], target = function () { }) {\r\n    let isProxyReleased = false;\r\n    const proxy = new Proxy(target, {\r\n        get(_target, prop) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            if (prop === releaseProxy) {\r\n                return () => {\r\n                    return requestResponseMessage(ep, {\r\n                        type: \"RELEASE\" /* RELEASE */,\r\n                        path: path.map((p) => p.toString()),\r\n                    }).then(() => {\r\n                        closeEndPoint(ep);\r\n                        isProxyReleased = true;\r\n                    });\r\n                };\r\n            }\r\n            if (prop === \"then\") {\r\n                if (path.length === 0) {\r\n                    return { then: () => proxy };\r\n                }\r\n                const r = requestResponseMessage(ep, {\r\n                    type: \"GET\" /* GET */,\r\n                    path: path.map((p) => p.toString()),\r\n                }).then(fromWireValue);\r\n                return r.then.bind(r);\r\n            }\r\n            return createProxy(ep, [...path, prop]);\r\n        },\r\n        set(_target, prop, rawValue) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\r\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\r\n            const [value, transferables] = toWireValue(rawValue);\r\n            return requestResponseMessage(ep, {\r\n                type: \"SET\" /* SET */,\r\n                path: [...path, prop].map((p) => p.toString()),\r\n                value,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        apply(_target, _thisArg, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const last = path[path.length - 1];\r\n            if (last === createEndpoint) {\r\n                return requestResponseMessage(ep, {\r\n                    type: \"ENDPOINT\" /* ENDPOINT */,\r\n                }).then(fromWireValue);\r\n            }\r\n            // We just pretend that `bind()` didn’t happen.\r\n            if (last === \"bind\") {\r\n                return createProxy(ep, path.slice(0, -1));\r\n            }\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: \"APPLY\" /* APPLY */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        construct(_target, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: \"CONSTRUCT\" /* CONSTRUCT */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n    });\r\n    return proxy;\r\n}\r\nfunction myFlat(arr) {\r\n    return Array.prototype.concat.apply([], arr);\r\n}\r\nfunction processArguments(argumentList) {\r\n    const processed = argumentList.map(toWireValue);\r\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\r\n}\r\nconst transferCache = new WeakMap();\r\nfunction transfer(obj, transfers) {\r\n    transferCache.set(obj, transfers);\r\n    return obj;\r\n}\r\nfunction proxy(obj) {\r\n    return Object.assign(obj, { [proxyMarker]: true });\r\n}\r\nfunction windowEndpoint(w, context = self, targetOrigin = \"*\") {\r\n    return {\r\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\r\n        addEventListener: context.addEventListener.bind(context),\r\n        removeEventListener: context.removeEventListener.bind(context),\r\n    };\r\n}\r\nfunction toWireValue(value) {\r\n    for (const [name, handler] of transferHandlers) {\r\n        if (handler.canHandle(value)) {\r\n            const [serializedValue, transferables] = handler.serialize(value);\r\n            return [\r\n                {\r\n                    type: \"HANDLER\" /* HANDLER */,\r\n                    name,\r\n                    value: serializedValue,\r\n                },\r\n                transferables,\r\n            ];\r\n        }\r\n    }\r\n    return [\r\n        {\r\n            type: \"RAW\" /* RAW */,\r\n            value,\r\n        },\r\n        transferCache.get(value) || [],\r\n    ];\r\n}\r\nfunction fromWireValue(value) {\r\n    switch (value.type) {\r\n        case \"HANDLER\" /* HANDLER */:\r\n            return transferHandlers.get(value.name).deserialize(value.value);\r\n        case \"RAW\" /* RAW */:\r\n            return value.value;\r\n    }\r\n}\r\nfunction requestResponseMessage(ep, msg, transfers) {\r\n    return new Promise((resolve) => {\r\n        const id = generateUUID();\r\n        ep.addEventListener(\"message\", function l(ev) {\r\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\r\n                return;\r\n            }\r\n            ep.removeEventListener(\"message\", l);\r\n            resolve(ev.data);\r\n        });\r\n        if (ep.start) {\r\n            ep.start();\r\n        }\r\n        ep.postMessage(Object.assign({ id }, msg), transfers);\r\n    });\r\n}\r\nfunction generateUUID() {\r\n    return new Array(4)\r\n        .fill(0)\r\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\r\n        .join(\"-\");\r\n}\n\nexport { createEndpoint, expose, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","// ie., https://www.linkedin.com/in/annieheckenberger/\nconst STANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP =\n\t/(?:https?:)?(?:\\/\\/)?(?:[\\w]+\\.)?(?:linkedin\\.com)?\\/in\\/(?<publicIdentifier>[\\w_À&&-ÿ%-][^/?]+)\\/?/i;\n\n// Examples:\n// https://www.linkedin.com/sales/company/130757/insights?_ntb=fAcMJ6%2FtREiNqQyKnKT4Xg%3D%3D\n// https://www.linkedin.com/sales/people/ACwAAAAmVFgBoPQGSO_l_3cwHlpNdOiHdaW2pAQ,NAME_SEARCH,L7q4?_ntb=%C2%A6%15O%09%C3%92%C2%AAA%C2%B0%C2%AF%C3%90%20C%C3%BFk%1D%C2%9A\n// https://www.linkedin.com/sales/lead/ACwAAAAmVFgBoPQGSO_l_3cwHlpNdOiHdaW2pAQ,NAME_SEARCH,L7q4?_ntb=%C2%A6%15O%09%C3%92%C2%AAA%C2%B0%C2%AF%C3%90%20C%C3%BFk%1D%C2%9A\nconst PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP =\n\t/(?:https?:)?(?:\\/\\/)?(?:[\\w]+\\.)?(?:linkedin\\.com)?\\/sales\\/(people|lead)\\/(?<publicIdentifier>[\\w_À&-ÿ%-][^,?/]+)?/i;\n\n// ie., https://www.linkedin.com/company/saatchi-&-saatchi-wellness/\nconst STANDARD_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP =\n\t/(?:https?:)?(?:\\/\\/)?(?:[\\w]+\\.)?(?:linkedin\\.com)?\\/company\\/(?<publicIdentifier>[\\w_À&-ÿ%-][^/?]+)\\/?/i;\n\n// ie., /sales/company/610608?_ntb=fAcMJ6%2FtREiNqQyKnKT4Xg%3D%3D\nconst PREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP =\n\t/(?:https?:)?(?:\\/\\/)?(?:[\\w]+\\.)?(?:linkedin\\.com)?\\/sales\\/company\\/(?<publicIdentifier>[\\d][^/?]+)\\/?/i;\n\n// Examples:\n// https://www.linkedin.com/talent/profile/AEMAAAB_kGABaRsOMBn6bfW1iw_90slztzfmdys?project=400938220&lipi=urn%3Ali%3Apage%3Ad_talent_projectsHome%3B%2BMSr4USfTHyZnlrgcgRpVw%3D%3D\n// /talent/profile/AEMAAAB_kGABaRsOMBn6bfW1iw_90slztzfmdys?project=400938220&lipi=urn%3Ali%3Apage%3Ad_talent_projectsHome%3B%2BMSr4USfTHyZnlrgcgRpVw%3D%3D\n// https://www.linkedin.com/talent/hire/400938220/manage/all/profile/AEMAAAEzgEcBNTs49BJySGuQVAAZ2K9CECIwpT0?project=400938220\nconst RECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP =\n\t/(?:\\/profile)\\/(?<publicIdentifier>[\\w_À&-ÿ%-][^?/]+)\\/?/i;\n\n// urn:li:fs_salesCompany:76390\n// urn:li:member:159784268286\n// urn:li:fsd_entityResultViewModel:(urn:li:fsd_company:3776,SEARCH_SRP)\nconst GET_MEMBER_ID_FROM_URN_REG_EXP =\n\t/(?:\\w+:(\\(?))+(?::[\\w_]+(?:member|company):)?(?<memberId>[\\d]+)?/i;\n\n// Examples:\n// urn:li:fs_salesProfile:(ACwAAABXB8YBL-pY0m1uk-T5PnxhaGO1zKqmc8U,NAME_SEARCH,ecVP)\n// urn:li:fsd_entityResultViewModel:urn:li:fsd_profile:ACoAAA2xYEwBskLoVyr5rCQ4PWpslakEhwAtgXc // New Community search result entityUrn\n// urn:li:fsd_profileCard:(ACoAAAAD8nEBVA4J_Y8kdohsFvb49-Gritg17kQ,EXPERIENCE,en_US)\nconst SALES_NAV_ID_FROM_URN_REG_EXP =\n\t/(?:\\w+:)+fs(?:d)?_(?:sales|mini|profile)?(Profile|Card):(?:\\()?(?<salesNavId>[\\w_À&-ÿ%-][^,]+)?,?(?<type>.[^,]+)?/i;\n\n// ie., urn:li:ts_profile:AEMAAABRsqUB-vVYVqCYoLwKjsFNBZFF_I4IYdw\nconst RECRUITER_CONTACT_FROM_URN_REG_EXP =\n\t/(?:\\w+:)+(ts_profile|ts_linkedin_member_profile):\\(?(?<recruiterId>[\\w_À&-ÿ%-][^,?]+)?/i;\n\n// TODO: this is getting big, refactor...how to pull key matchers\n// from central location instead of appending here\nconst profileUrlIdModuleRegexMap = {\n\tpremiumCompanySearch: PREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumCompanyProfile: PREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumSavedAccounts: PREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumCompanyRecommendedLeads:\n\t\tPREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumCompanyAccountMapEntries:\n\t\tPREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumCompanyPeopleAlsoViewed:\n\t\tPREMIUM_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\n\tpremiumSavedLeads: PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactSavedSearch: PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactSearch: PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactProfile: PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactRecommendations:\n\t\tPREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactRecommendedLeads:\n\t\tPREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tpremiumContactSimilarLeads: PREMIUM_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\n\tstandardCompanySearch: STANDARD_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardCompanyProfile: STANDARD_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardCompanyPeopleYouMayKnow:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardBlendedSearchCompany:\n\t\tSTANDARD_COMPANY_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\n\tstandardContactProfile: STANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardContactPeopleYouMayKnow:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardContactPeopleAlsoViewed:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardContactRecommendationsReceived:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardContactRecommendationsGiven:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardContactSearch: STANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\tstandardBlendedSearchContact:\n\t\tSTANDARD_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\n\trecruiterContactProfile: RECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\trecruiterContactRecommendations:\n\t\tRECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\trecruiterContactSimilarProfiles:\n\t\tRECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\trecruiterContactSearch: RECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n\trecruiterSavedContactSearch:\n\t\tRECRUITER_CONTACT_PROFILE_URL_PUBLIC_ID_REG_EXP,\n};\n\nexport function getIdFromProfileUrl(profileUrl, module) {\n\tif (!profileUrl || !module) {\n\t\treturn null;\n\t}\n\n\tconst matchRegExp = profileUrlIdModuleRegexMap[module];\n\tconst publicIdentifierMatchObj = profileUrl.match(matchRegExp);\n\tconst profileId = publicIdentifierMatchObj?.groups?.publicIdentifier;\n\treturn profileId ? decodeURI(profileId) : null;\n}\n\nexport function getMemberIdFromUrn(urn) {\n\tconst memberIdMatchObj = urn.match(GET_MEMBER_ID_FROM_URN_REG_EXP);\n\treturn memberIdMatchObj?.groups?.memberId;\n}\n\nexport function getSalesNavIdFromUrn(urn) {\n\tconst salesNavIdMatchObj = urn.match(SALES_NAV_ID_FROM_URN_REG_EXP);\n\treturn salesNavIdMatchObj?.groups?.salesNavId;\n}\n\nexport function getRecruiterIdFromUrn(urn) {\n\tconst recruiterIdMatchObj = urn.match(RECRUITER_CONTACT_FROM_URN_REG_EXP);\n\treturn recruiterIdMatchObj?.groups?.recruiterId;\n}\n\n// parses the salesnav style urn now used in new li basic graphQL data to get the id and data type from it.\n// creating this as a separate function from getSalesNavIdFromUrn for now as we try to move towards a new\n// structure of processing the data.\nexport function parseElementUrn(urn) {\n\tconst elementUrnMatchObj = urn.match(SALES_NAV_ID_FROM_URN_REG_EXP);\n\tconst { salesNavId, type } = elementUrnMatchObj?.groups || {};\n\treturn {\n\t\tliSalesNavId: salesNavId || '',\n\t\telementType: type || '',\n\t};\n}\n","const cleanEmptyNullData = (data) => {\n\tif (!data) {\n\t\treturn {};\n\t}\n\n\tconst cleanedData = data;\n\tObject.entries(cleanedData).forEach(([k, v]) => {\n\t\tif (v && typeof v === 'object') {\n\t\t\tcleanEmptyNullData(v);\n\t\t}\n\n\t\tif (\n\t\t\t(v && typeof v === 'object' && !Object.keys(v).length) ||\n\t\t\tv === null ||\n\t\t\tv === undefined\n\t\t) {\n\t\t\tif (Array.isArray(cleanedData)) {\n\t\t\t\tcleanedData.splice(k, 1);\n\t\t\t} else {\n\t\t\t\tdelete cleanedData[k];\n\t\t\t}\n\t\t}\n\t});\n\n\treturn cleanedData;\n};\n\nconst cleanLocationString = (locationString) => {\n\treturn (\n\t\tlocationString\n\t\t\t// Replace line breaks\n\t\t\t.replace(/(\\r\\n|\\n|\\r)/gm, ' ')\n\t\t\t.replace(/^Greater /, '')\n\t\t\t.replace(/ Area$/, '')\n\t\t\t.replace(/ Metropolitan$/, '')\n\t);\n};\n\nconst cleanUrl = (url) => {\n\tlet newUrl = url && typeof url === 'string' && url.trim();\n\tif (!newUrl) {\n\t\t// return original data\n\t\treturn url;\n\t}\n\n\tif (/^https?:\\/([^/].*|\\/\\/+.+)$/i.test(newUrl)) {\n\t\tnewUrl = newUrl.replace(/:\\/+/, '://');\n\t}\n\n\treturn newUrl;\n};\n\nexport { cleanEmptyNullData, cleanLocationString, cleanUrl };\n","import { cleanUrl } from 'utils/data';\n\nconst formatProfilePicture = (profilePicture) => {\n\ttry {\n\t\tlet picture = profilePicture;\n\n\t\tif (picture && typeof picture === 'object') {\n\t\t\tconst { artifacts, rootUrl } = picture;\n\t\t\tif (\n\t\t\t\trootUrl?.length &&\n\t\t\t\trootUrl.includes('http') &&\n\t\t\t\tartifacts &&\n\t\t\t\tArray.isArray(artifacts)\n\t\t\t) {\n\t\t\t\tpicture =\n\t\t\t\t\trootUrl +\n\t\t\t\t\tartifacts[artifacts.length - 1]\n\t\t\t\t\t\t.fileIdentifyingUrlPathSegment;\n\t\t\t} else if (\n\t\t\t\t(!rootUrl || !rootUrl.length) &&\n\t\t\t\tartifacts?.length &&\n\t\t\t\tartifacts[artifacts.length - 1].fileIdentifyingUrlPathSegment &&\n\t\t\t\tartifacts[\n\t\t\t\t\tartifacts.length - 1\n\t\t\t\t].fileIdentifyingUrlPathSegment.includes('http')\n\t\t\t) {\n\t\t\t\tpicture =\n\t\t\t\t\tartifacts[artifacts.length - 1]\n\t\t\t\t\t\t.fileIdentifyingUrlPathSegment;\n\t\t\t}\n\n\t\t\tif (!picture || !picture.length) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\tpicture = picture && cleanUrl(picture);\n\t\treturn picture;\n\t} catch (err) {\n\t\treturn undefined;\n\t}\n};\n\nexport default formatProfilePicture;\n","import { getMax } from 'utils/number';\n\nconst REVENUE_RANGES = {\n\t'$0-$100K': [0, 100000],\n\t'$100K-$1M': [100001, 1000000],\n\t'$1M-$5M': [1000001, 5000000],\n\t'$5M-$20M': [5000001, 20000000],\n\t'$20M-$50M': [20000001, 50000000],\n\t'$50M-$100M': [50000001, 100000000],\n\t'$100M-$500M': [100000001, 500000000],\n\t'$500M-$1B': [500000001, 1000000000],\n\t'$1B+': [1000000001, 200000000000000],\n};\n\n/**\n * Function that takes an annual revenue and produces a string range\n * @param {string} - annualRevenue\n * @returns {string} - The annual revenue converted to a set range\n */\nexport function formatRevenueRange(annualRevenue) {\n\tconst val = parseInt(annualRevenue, 10);\n\treturn Object.keys(REVENUE_RANGES).filter((k) => {\n\t\tconst range = REVENUE_RANGES[k];\n\t\treturn val >= range[0] && val <= range[1];\n\t})[0];\n}\n\nexport function formatStaffCountRange(staffRange) {\n\tlet _staffRange = staffRange;\n\tif (_staffRange === 'myself only') {\n\t\t_staffRange = '0 - 1';\n\t} else if (_staffRange?.start != null) {\n\t\tif (_staffRange.end) {\n\t\t\t_staffRange = `${_staffRange.start} - ${_staffRange.end}`;\n\t\t} else {\n\t\t\t_staffRange = `${_staffRange.start}`;\n\t\t}\n\t}\n\n\treturn _staffRange;\n}\n\n/**\n *\n * @param count\n * @param range\n * @returns {string}\n */\nexport function getNormalizedEmployeeCount({ count, range }) {\n\tlet _count = count;\n\tif (!_count && (!range || (typeof range === 'string' && !range.length))) {\n\t\t// in case one is zero return that\n\t\treturn typeof _count !== 'undefined' ? _count : null;\n\t}\n\n\t_count = ~~(\n\t\t(typeof _count === 'string' &&\n\t\t\t_count.length &&\n\t\t\t~~_count.replace(/\\D/g, '')) ||\n\t\t_count\n\t);\n\tif (!range || (typeof range === 'string' && !range.length)) {\n\t\treturn _count;\n\t}\n\n\t// can have either a `-` or `to` as the range separator\n\tlet rangeLower;\n\tif (range === 'Less than 25') {\n\t\trangeLower = 1;\n\t} else {\n\t\trangeLower =\n\t\t\t(range && range.start) ||\n\t\t\t(typeof range === 'string' &&\n\t\t\t\trange.length &&\n\t\t\t\trange\n\t\t\t\t\t.replace(/\\s/g, '')\n\t\t\t\t\t.split('-')[0]\n\t\t\t\t\t.split('to')[0]\n\t\t\t\t\t.replace(/\\D/g, ''));\n\t}\n\n\treturn getMax([~~rangeLower || 1, _count]);\n}\n","// TODO: This was copied from `@seamless/core` and should be replaced with the version there\n// when that package has better code splitting support, b/c currently the build throws\n// errors when an imported method is used in a web worker.\n//\n// If this is to be imported anywhere other than a web worker, use the module from '@seamless/core'\n\n/**\n * Check if value is the language type of Object\n * @param {any} val - The value to test\n * @return {boolean} - True if the value is an Object, otherwise false.\n * example\n * isObject({}); // -> true\n * isObject([]); // -> true\n */\nconst isObject = (val) => {\n\tconst type = typeof val;\n\treturn !!val && (type === 'function' || type === 'object');\n};\n\nexport default isObject;\n","// TODO: This was copied from `@seamless/core` and should be replaced with the version there\n// when that package has better code splitting support, b/c currently the build throws\n// errors when an imported method is used in a web worker.\n//\n// If this is to be imported anywhere other than a web worker, use the module from '@seamless/core'\n\nimport isObject from './isObject';\n\n/**\n * Check if value is an empty object or array.\n * @param {any} val - The value to check\n * @return {boolean} - True if the value is empty\n * example\n * isEmpty([]); // -> true\n * isEmpty({}); // -> true\n */\nconst isEmpty = (val) => {\n\tif (val == null) {\n\t\treturn true;\n\t}\n\n\tif (Array.isArray(val)) {\n\t\treturn val.length === 0;\n\t}\n\n\treturn isObject(val) && Object.keys(val).length === 0;\n};\n\nexport default isEmpty;\n","import isEmpty from 'utils/coreDupes/isEmpty';\nimport isObject from 'utils/coreDupes/isObject';\n\n/**\n * Email Address\n */\n\n/**\n * Takes a number of email address response types from a LinkedIn response and returns just the email address\n * @param {Array.<Object>} emails - Several different objects with a nested email address\n * @param {string} primaryEmail - When sometimes an email address is passed down without other LinkedIn display data\n * @returns {string} The deduced email address\n */\nexport function formatEmailAddress(emails, primaryEmail) {\n\ttry {\n\t\tlet emailAddress;\n\n\t\tif (primaryEmail?.length) {\n\t\t\temailAddress = primaryEmail;\n\t\t} else if (emails && typeof emails === 'string' && emails.length) {\n\t\t\temailAddress = emails;\n\t\t} else if (emails?.emailAddress) {\n\t\t\temailAddress = emails.emailAddress;\n\t\t} else if (Array.isArray(emails) && emails.length) {\n\t\t\temailAddress = emails[0].emailAddress;\n\t\t}\n\n\t\treturn emailAddress;\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n\n/**\n * Location\n */\n\nexport const cleanLocationString = (locationString) => {\n\treturn (\n\t\tlocationString\n\t\t\t// Replace line breaks\n\t\t\t.replace(/(\\r\\n|\\n|\\r)/gm, ' ')\n\t\t\t.replace(/^Greater /, '')\n\t\t\t.replace(/ Area$/, '')\n\t\t\t.replace(/ Metropolitan$/, '')\n\t);\n};\n\nconst LOCATION_OBJECT_KEYS = [\n\t'line1',\n\t'line2',\n\t'city',\n\t'geographicArea',\n\t'postalCode',\n\t'country',\n];\nfunction hasValidLocationKeys(location) {\n\treturn (\n\t\tisObject(location) &&\n\t\t!isEmpty(location) &&\n\t\tObject.keys(location).some((k) => LOCATION_OBJECT_KEYS.includes(k))\n\t);\n}\n\nexport function formatCompanyLocationObject(location) {\n\ttry {\n\t\tlet street1;\n\t\tlet street2;\n\t\tlet city;\n\t\tlet state;\n\t\tlet postCode;\n\t\tlet country;\n\n\t\tif (location && hasValidLocationKeys(location)) {\n\t\t\t({\n\t\t\t\tline1: street1,\n\t\t\t\tline2: street2,\n\t\t\t\tcity,\n\t\t\t\tgeographicArea: state,\n\t\t\t\tpostalCode: postCode,\n\t\t\t\tcountry,\n\t\t\t} = location);\n\t\t}\n\n\t\treturn {\n\t\t\tstreet1,\n\t\t\tstreet2,\n\t\t\tcity,\n\t\t\tstate,\n\t\t\tpostCode,\n\t\t\tcountry,\n\t\t};\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n\nexport function getCompanyLocationStringFromObject(locationObject) {\n\ttry {\n\t\tlet fullString;\n\t\tif (!isEmpty(locationObject)) {\n\t\t\tconst {\n\t\t\t\tstreet1,\n\t\t\t\tstreet2 = '',\n\t\t\t\tcity,\n\t\t\t\tstate,\n\t\t\t\tpostCode,\n\t\t\t\tcountry,\n\t\t\t} = locationObject;\n\t\t\tfullString = [street1, street2, city, state, postCode, country]\n\t\t\t\t.map((s) => s && s.trim())\n\t\t\t\t.filter((s) => !!s)\n\t\t\t\t.join(' ');\n\t\t}\n\n\t\tif (typeof fullString === 'string' && !fullString.length) {\n\t\t\tfullString = undefined;\n\t\t}\n\n\t\treturn fullString;\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n\n/**\n * Social\n */\n\nexport function formatContactSocial({\n\twebsites = [],\n\tsocialHandles = [],\n\ttwitterHandles = [],\n}) {\n\ttry {\n\t\tlet social = [];\n\n\t\tif (websites?.length) {\n\t\t\tconst contactWebsites = websites\n\t\t\t\t.map(\n\t\t\t\t\t(w) =>\n\t\t\t\t\t\tw && {\n\t\t\t\t\t\t\ttype: w.type?.category\n\t\t\t\t\t\t\t\t? w.type.category\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\turl: w.url,\n\t\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\t.filter((w) => !!w);\n\t\t\tif (contactWebsites?.length) {\n\t\t\t\tcontactWebsites.forEach((website) => social.push(website));\n\t\t\t}\n\t\t}\n\n\t\tif (socialHandles?.length) {\n\t\t\tconst contactSocialHandles = socialHandles.map(\n\t\t\t\t(t) =>\n\t\t\t\t\tt?.type?.length &&\n\t\t\t\t\tt.type.toLowerCase() === 'twitter' && {\n\t\t\t\t\t\ttype: 'social',\n\t\t\t\t\t\tsocialType: 'twitter',\n\t\t\t\t\t\turl: `http://twitter.com/${t.name}`,\n\t\t\t\t\t}\n\t\t\t);\n\n\t\t\tif (contactSocialHandles?.length) {\n\t\t\t\tsocial.push(contactSocialHandles);\n\t\t\t}\n\t\t}\n\n\t\tif (twitterHandles?.length) {\n\t\t\tconst contactTwitterHandles = twitterHandles.map(\n\t\t\t\t(t) =>\n\t\t\t\t\tt?.name && {\n\t\t\t\t\t\ttype: 'social',\n\t\t\t\t\t\tsocialType: 'twitter',\n\t\t\t\t\t\turl: t.name.includes('http')\n\t\t\t\t\t\t\t? t.name\n\t\t\t\t\t\t\t: `http://twitter.com/${t.name}`,\n\t\t\t\t\t}\n\t\t\t);\n\t\t\tif (contactTwitterHandles?.length) {\n\t\t\t\tsocial.push(contactTwitterHandles);\n\t\t\t}\n\t\t}\n\n\t\t// if (picture && picture.length) {\n\t\t// \tsocial.push({\n\t\t// \t\ttype: 'image',\n\t\t// \t\turl: picture,\n\t\t// \t\tsocialType: 'LinkedIn',\n\t\t// \t});\n\t\t// }\n\n\t\tif (social?.length) {\n\t\t\tsocial = social.filter((s) => s && s.url);\n\t\t}\n\n\t\treturn social;\n\t} catch (err) {\n\t\treturn null;\n\t}\n}\n","import isEmpty from 'utils/coreDupes/isEmpty';\n\nconst hasResults = (data) => Array.isArray(data) && !isEmpty(data);\n\nexport default hasResults;\n","import formatProfilePicture from 'workers/processExtractedData/utils/formatProfilePicture';\nimport {\n\tformatRevenueRange,\n\tformatStaffCountRange,\n\tgetNormalizedEmployeeCount,\n} from 'workers/processExtractedData/utils/organization';\nimport {\n\tformatCompanyLocationObject,\n\tgetCompanyLocationStringFromObject,\n} from 'workers/processExtractedData/utils/contactInfo';\nimport { cleanEmptyNullData } from 'utils/data';\nimport hasResults from 'utils/hasResults';\nimport isEmpty from 'utils/coreDupes/isEmpty';\nimport isObject from 'utils/coreDupes/isObject';\n\nconst STANDARD_COMPANY_PROFILE_URL_BASE = 'https://www.linkedin.com/company/';\nconst PREMIUM_COMPANY_PROFILE_URL = (linkedInId) =>\n\t`https://www.linkedin.com/sales/accounts/insights?companyId=${linkedInId}&trk=li_comp_page`;\n\nconst INVALID_WEBSITES = ['linkedin.com', 'licdn.com'];\nfunction isValidCompanyWebsite(website) {\n\treturn (\n\t\twebsite &&\n\t\tINVALID_WEBSITES.every((invalidUrl) => !website.includes(invalidUrl))\n\t);\n}\n\nconst createSeamlessCompany = (data) => {\n\tconst {\n\t\t// LinkedIn Identifiers\n\t\tlinkedInId,\n\t\tlinkedInProfileIdentifier,\n\t\tlinkedInUrn,\n\n\t\t// LinkedIn Profile URLs\n\t\tlinkedInProfileUrl, // Currently NOT part of the Seamless API company model\n\t\tlinkedInSalesNavUrl,\n\n\t\t// Entity info\n\t\tname,\n\t\tlogo,\n\t\tdescription,\n\n\t\t// Company info\n\t\tannualRevenue,\n\t\tfoundedOn,\n\t\tindustries,\n\t\tspecialities,\n\t\tstaffCount,\n\t\tstaffCountRange: staffRange,\n\t\ttype,\n\n\t\t// Company contact info\n\t\tcompanyPageUrl,\n\t\tcompanyUrl,\n\t\twebsite,\n\t\tconfirmedLocations,\n\t\theadquarter,\n\t\theadquarters,\n\t\tlocationFullString,\n\n\t\t// Social\n\t\tlinkedInFollowerCount,\n\n\t\t// Relations\n\t\taffiliatedCompanies,\n\t} = data;\n\n\tconst addresses = locationFullString ? [locationFullString] : [];\n\n\tlet location = locationFullString;\n\tif (isObject(headquarter) || isObject(headquarters)) {\n\t\tconst _headquarter = formatCompanyLocationObject(\n\t\t\theadquarter || headquarters\n\t\t);\n\t\tif (!isEmpty(_headquarter)) {\n\t\t\taddresses.push(_headquarter);\n\t\t\tif (!location) {\n\t\t\t\tlocation = getCompanyLocationStringFromObject(_headquarter);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (hasResults(confirmedLocations)) {\n\t\tfor (const confirmedLocation of confirmedLocations) {\n\t\t\tconst formattedLocation =\n\t\t\t\tformatCompanyLocationObject(confirmedLocation);\n\t\t\tif (formattedLocation) {\n\t\t\t\taddresses.push(formattedLocation);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst staffCountRange = staffRange && formatStaffCountRange(staffRange);\n\tconst employeeCountNmlzd =\n\t\t(staffCount || staffCountRange) &&\n\t\tgetNormalizedEmployeeCount({\n\t\t\tcount: staffCount,\n\t\t\trange: staffCountRange,\n\t\t});\n\n\tconst parsedAnnualRevenue =\n\t\tannualRevenue && Number.parseFloat(annualRevenue).toFixed(0);\n\n\tconst companyWebsite = website || companyPageUrl || companyUrl;\n\n\tlet company = {\n\t\tlinkedInId,\n\t\tlinkedInProfileIdentifier,\n\t\tlinkedInUrn,\n\t\tlinkedInProfileUrl:\n\t\t\tlinkedInProfileUrl ||\n\t\t\t(linkedInProfileIdentifier &&\n\t\t\t\t`${STANDARD_COMPANY_PROFILE_URL_BASE}${linkedInProfileIdentifier}`),\n\t\tlinkedInSalesNavUrl:\n\t\t\tlinkedInSalesNavUrl ||\n\t\t\t(linkedInId && PREMIUM_COMPANY_PROFILE_URL(linkedInId)),\n\t\tname,\n\t\tdescription,\n\t\tcompanyLogoUrl: logo && formatProfilePicture(logo),\n\t\tannualRevenue: parsedAnnualRevenue,\n\t\trevenueRevenue:\n\t\t\tparsedAnnualRevenue && formatRevenueRange(parsedAnnualRevenue),\n\t\tfoundedOn,\n\t\tindustries,\n\t\tspecialities,\n\t\tstaffCount,\n\t\tstaffCountRange,\n\t\temployeeCountNmlzd,\n\t\ttype,\n\t\taddresses: hasResults(addresses) ? addresses : null,\n\t\tlocation,\n\t\twebsite: isValidCompanyWebsite(companyWebsite) ? companyWebsite : null,\n\t\tlinkedInFollowerCount: linkedInFollowerCount && ~~linkedInFollowerCount,\n\t\taffiliatedCompanies,\n\t\titemType: 'company',\n\t};\n\n\tcompany = cleanEmptyNullData(company);\n\treturn company;\n};\n\nexport default createSeamlessCompany;\n","/**\n * Get a random number between the given min/max. Defaults: min=0, max=1.\n * @param {number?} min Minimum value returned. Default 0\n * @param {number?} max Maximum value returned. Default 1 if min is 0. Optionally calculated as min * 1.5\n * @returns {number}\n */\nconst getRandomNumber = (min = 0, max = (min || 2 / 3) * 1.5) => {\n\treturn Math.round(\n\t\tMath.max(\n\t\t\tMath.min(\n\t\t\t\tmin + Math.random() * min,\n\t\t\t\tmin + Math.random() * min - min * 0.4\n\t\t\t),\n\t\t\tmin + Math.random() * (max - min)\n\t\t)\n\t);\n};\n\nconst getMax = (numbers) => {\n\treturn numbers && numbers.length && Math.max(...numbers);\n};\n\nexport { getMax, getRandomNumber };\n","const VALID_COMPANY_PROPERTIES = ['name', 'linkedInId', 'linkedInUrn'];\nconst isValidCompany = (company) => {\n\treturn VALID_COMPANY_PROPERTIES.every((prop) =>\n\t\tObject.prototype.hasOwnProperty.call(company, prop)\n\t);\n};\n\nexport default isValidCompany;\n","import { getMemberIdFromUrn } from 'workers/processExtractedData/utils/identifiers';\nimport createSeamlessCompany from 'workers/processExtractedData/utils/createSeamlessCompany';\nimport isValidCompany from 'utils/isValidCompany';\n\nconst parsePremiumSavedAccounts = (item) => {\n\tconst {\n\t\tcompanyName,\n\t\tcompanyPictureDisplayImage,\n\t\temployeeCountRange,\n\t\tentityUrn,\n\t\tindustry,\n\t\tlocation,\n\t} = item;\n\n\tconst companyOpts = {\n\t\tlinkedInId: entityUrn && getMemberIdFromUrn(entityUrn),\n\t\tlinkedInUrn: entityUrn,\n\t\tname: companyName,\n\t\tlogo: companyPictureDisplayImage,\n\t\tstaffCountRange: employeeCountRange,\n\t\tindustries: industry ? [industry] : null,\n\t\tlocationFullString: location,\n\t};\n\n\tconst parsedCompany = createSeamlessCompany(companyOpts);\n\tparsedCompany.pageSectionSourced = 'premiumSavedAccounts';\n\tparsedCompany.itemType = 'company';\n\treturn isValidCompany(parsedCompany) ? parsedCompany : null;\n};\n\nexport default parsePremiumSavedAccounts;\n","import { expose } from 'comlink';\nimport parsePremiumSavedAccounts from 'workers/processExtractedData/processPremiumSavedAccountsData/parsePremiumSavedAccounts';\n\nconst PREMIUM_SAVED_ACCOUNTS_METADATA_PROP_LEVEL_ONE = 'pivot';\nconst PREMIUM_SAVED_ACCOUNTS_METADATA_PROP_LEVEL_TWO =\n\t'com.linkedin.sales.search.ListPivotResponse';\nconst hasSavedAccountsData = (data) => {\n\treturn Boolean(\n\t\tdata.metadata?.[PREMIUM_SAVED_ACCOUNTS_METADATA_PROP_LEVEL_ONE]?.[\n\t\t\tPREMIUM_SAVED_ACCOUNTS_METADATA_PROP_LEVEL_TWO\n\t\t]\n\t);\n};\n\nconst processSavedAccountsExtractedDataWorker = async (pageData) => {\n\tlet parsedItems = [];\n\tif (hasSavedAccountsData(pageData)) {\n\t\tconst companyParsers = pageData.elements.map((item) =>\n\t\t\tparsePremiumSavedAccounts(item)\n\t\t);\n\t\tif (companyParsers?.length) {\n\t\t\tparsedItems = await Promise.all(companyParsers);\n\t\t}\n\t\treturn {\n\t\t\tparsedItems,\n\t\t};\n\t}\n};\n\nexpose(processSavedAccountsExtractedDataWorker, self);\n"],"names":["proxyMarker","Symbol","createEndpoint","releaseProxy","throwMarker","isObject","val","transferHandlers","Map","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","start","createProxy","target","value","serialized","Error","isError","message","name","stack","Object","assign","ep","self","addEventListener","callback","ev","data","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfers","transferCache","set","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","endpoint","constructor","isMessagePort","close","throwIfProxyReleased","isReleased","isProxyReleased","Proxy","get","_target","requestResponseMessage","p","toString","length","r","bind","_thisArg","rawArgumentList","last","processArguments","construct","processed","v","arr","Array","prototype","concat","WeakMap","handler","serializedValue","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l","GET_MEMBER_ID_FROM_URN_REG_EXP","cleanEmptyNullData","cleanedData","entries","forEach","k","keys","isArray","splice","profilePicture","picture","artifacts","rootUrl","includes","fileIdentifyingUrlPathSegment","url","newUrl","trim","test","replace","cleanUrl","err","REVENUE_RANGES","formatRevenueRange","annualRevenue","parseInt","filter","range","LOCATION_OBJECT_KEYS","formatCompanyLocationObject","location","street1","street2","city","state","postCode","country","isEmpty","some","hasValidLocationKeys","line1","line2","geographicArea","postalCode","PREMIUM_COMPANY_PROFILE_URL","linkedInId","INVALID_WEBSITES","isValidCompanyWebsite","website","every","invalidUrl","linkedInProfileIdentifier","linkedInUrn","linkedInProfileUrl","linkedInSalesNavUrl","logo","description","foundedOn","industries","specialities","staffCount","staffCountRange","staffRange","companyPageUrl","companyUrl","confirmedLocations","headquarter","headquarters","locationFullString","linkedInFollowerCount","affiliatedCompanies","addresses","_headquarter","push","locationObject","fullString","s","getCompanyLocationStringFromObject","hasResults","confirmedLocation","formattedLocation","_staffRange","end","formatStaffCountRange","employeeCountNmlzd","count","rangeLower","_count","split","numbers","max","getNormalizedEmployeeCount","parsedAnnualRevenue","parseFloat","toFixed","companyWebsite","company","companyLogoUrl","formatProfilePicture","revenueRevenue","itemType","VALID_COMPANY_PROPERTIES","item","companyName","companyPictureDisplayImage","employeeCountRange","entityUrn","industry","companyOpts","urn","match","groups","memberId","parsedCompany","createSeamlessCompany","pageSectionSourced","hasOwnProperty","call","async","parsedItems","Boolean","pageData","metadata","companyParsers","elements","parsePremiumSavedAccounts","all"],"sourceRoot":""}